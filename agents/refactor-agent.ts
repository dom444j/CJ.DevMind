import { BaseAgent, AgentEventType } from './base-agent';
import fs from 'fs';
import path from 'path';
import glob from 'glob';
import { exec } from 'child_process';

/**
 * Refactor Agent - Analiza y refactoriza c√≥digo existente
 * 
 * Este agente es responsable de:
 * 1. Analizar c√≥digo existente para identificar problemas y patrones
 * 2. Aplicar mejores pr√°cticas y patrones de dise√±o
 * 3. Mejorar la legibilidad y mantenibilidad del c√≥digo
 * 4. Optimizar el rendimiento mediante refactorizaciones
 * 5. Estandarizar la estructura del c√≥digo en todo el proyecto
 * 6. Implementar patrones de dise√±o espec√≠ficos
 * 7. Mejorar la accesibilidad del c√≥digo
 * 8. Colaborar con el CodeReviewAgent para validar refactorizaciones
 */
export class RefactorAgent extends BaseAgent {
  private codebasePath: string;
  private dryRun: boolean = false;
  private metricsEnabled: boolean = true;
  
  /**
   * Constructor del Refactor Agent
   */
  constructor() {
    super('Refactor Agent');
    this.codebasePath = process.cwd();
    this.registerRefactorEventHandlers();
  }
  
  /**
   * Ejecuta el agente con un comando espec√≠fico
   */
  public async run(spec: string): Promise<void> {
    this.log(`üîÑ Ejecutando Refactor Agent con: ${spec}`);
    
    // Cargar contexto del proyecto
    const coreContext = await this.loadContext('core');
    const rulesContext = await this.loadContext('rules');
    
    // Determinar el tipo de operaci√≥n
    if (spec.startsWith('analyze:')) {
      const targetPath = spec.substring('analyze:'.length).trim();
      await this.analyzeCode(targetPath, coreContext, rulesContext);
    } else if (spec.startsWith('apply:')) {
      const refactorSpec = spec.substring('apply:'.length).trim();
      await this.applyRefactoring(refactorSpec, coreContext, rulesContext);
    } else if (spec.startsWith('dry-run:')) {
      this.dryRun = true;
      const refactorSpec = spec.substring('dry-run:'.length).trim();
      await this.applyRefactoring(refactorSpec, coreContext, rulesContext);
    } else if (spec.startsWith('standardize:')) {
      const pattern = spec.substring('standardize:'.length).trim();
      await this.standardizeCode(pattern, coreContext, rulesContext);
    } else if (spec.startsWith('pattern:')) {
      const patternSpec = spec.substring('pattern:'.length).trim();
      await this.implementPattern(patternSpec, coreContext, rulesContext);
    } else if (spec.startsWith('accessibility:')) {
      const accessibilitySpec = spec.substring('accessibility:'.length).trim();
      await this.improveAccessibility(accessibilitySpec, coreContext, rulesContext);
    } else if (spec.startsWith('metrics:')) {
      const metricsSpec = spec.substring('metrics:'.length).trim();
      await this.calculateMetrics(metricsSpec, coreContext, rulesContext);
    } else if (spec.startsWith('review:')) {
      const reviewSpec = spec.substring('review:'.length).trim();
      await this.requestCodeReview(reviewSpec);
    } else {
      // Modo por defecto: analizar y sugerir
      await this.analyzeAndSuggest(spec, coreContext, rulesContext);
    }
  }
  
  /**
   * Registra manejadores de eventos espec√≠ficos
   */
  private registerRefactorEventHandlers(): void {
    // Escuchar cuando se crea un nuevo recurso para posible refactorizaci√≥n
    this.listenForEvent(AgentEventType.RESOURCE_CREATED, async (message) => {
      this.log(`üìù Nuevo recurso detectado: ${message.content.path}`);
      // No hacer nada autom√°ticamente, solo registrar
    });
    
    // Escuchar cuando se solicita una refactorizaci√≥n
    this.listenForEvent(AgentEventType.REFACTOR_REQUESTED, async (message) => {
      this.log(`üîÑ Refactorizaci√≥n solicitada por ${message.from}: ${message.content.target}`);
      
      // Ejecutar la refactorizaci√≥n
      await this.run(`analyze:${message.content.target}`);
      
      // Notificar al solicitante
      this.sendEvent(AgentEventType.REFACTOR_COMPLETED, {
        target: message.content.target,
        timestamp: new Date().toISOString(),
        changes: 'An√°lisis completado'
      }, message.from);
    });
    
    // Escuchar cuando se completa una revisi√≥n de c√≥digo
    this.listenForEvent(AgentEventType.CODE_REVIEW_COMPLETED, async (message) => {
      if (message.content.requestedBy === this.name) {
        this.log(`üìã Revisi√≥n de c√≥digo completada para: ${message.content.target}`);
        
        // Aplicar sugerencias si est√°n aprobadas
        if (message.content.status === 'approved') {
          this.log('‚úÖ Revisi√≥n aprobada, aplicando sugerencias...');
          await this.applySuggestions(message.content.target, message.content.suggestions);
        } else {
          this.log('‚ö†Ô∏è Revisi√≥n rechazada o con comentarios. Revisar manualmente.');
        }
      }
    });
  }
  
  /**
   * Analiza el c√≥digo y genera un informe
   */
  private async analyzeCode(targetPath: string, coreContext: string, rulesContext: string): Promise<void> {
    this.log(`üîç Analizando c√≥digo en: ${targetPath}`);
    
    // Verificar que la ruta existe
    const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
    
    if (!fs.existsSync(fullPath)) {
      this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
      return;
    }
    
    // Determinar si es un archivo o directorio
    const isDirectory = fs.statSync(fullPath).isDirectory();
    
    // Obtener archivos a analizar
    const filesToAnalyze: string[] = [];
    
    if (isDirectory) {
      // Buscar archivos TypeScript/JavaScript en el directorio
      const files = glob.sync('**/*.{ts,tsx,js,jsx,html,css,scss}', { cwd: fullPath, absolute: true });
      filesToAnalyze.push(...files);
    } else {
      filesToAnalyze.push(fullPath);
    }
    
    if (filesToAnalyze.length === 0) {
      this.log('‚ö†Ô∏è No se encontraron archivos para analizar', 'warning');
      return;
    }
    
    this.log(`üìä Analizando ${filesToAnalyze.length} archivos...`);
    
    // Leer el contenido de los archivos
    const fileContents: Record<string, string> = {};
    filesToAnalyze.forEach(file => {
      try {
        fileContents[file] = fs.readFileSync(file, 'utf-8');
      } catch (error) {
        this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
      }
    });
    
    // Crear prompt para el LLM
    const analysisPrompt = `
    # Contexto del Proyecto
    ${coreContext}
    
    # Reglas Arquitect√≥nicas
    ${rulesContext}
    
    # Tarea de An√°lisis de C√≥digo
    Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es analizar el siguiente c√≥digo y proporcionar recomendaciones de refactorizaci√≥n.
    
    ## Archivos a Analizar
    ${Object.entries(fileContents).map(([file, content]) => `
    ### ${path.basename(file)}
    \`\`\`${path.extname(file).substring(1)}
    ${content}
    \`\`\`
    `).join('\n')}
    
    ## Instrucciones
    1. Identifica problemas en el c√≥digo (duplicaci√≥n, complejidad, violaciones de principios SOLID, etc.)
    2. Sugiere refactorizaciones espec√≠ficas con ejemplos de c√≥digo
    3. Prioriza las refactorizaciones por impacto y facilidad de implementaci√≥n
    4. Considera las reglas arquitect√≥nicas del proyecto
    5. Eval√∫a posibles mejoras de accesibilidad cuando sea aplicable
    6. Identifica oportunidades para implementar patrones de dise√±o
    7. Sugiere m√©tricas para evaluar el impacto de las refactorizaciones
    
    Estructura tu respuesta en formato Markdown con las siguientes secciones:
    1. Resumen del an√°lisis
    2. Problemas identificados (por archivo)
    3. Recomendaciones de refactorizaci√≥n (por archivo)
    4. Patrones de dise√±o recomendados
    5. Consideraciones de accesibilidad
    6. M√©tricas de evaluaci√≥n
    7. Plan de implementaci√≥n
    `;
    
    try {
      // Consultar al LLM
      const analysisResult = await this.queryLLM(analysisPrompt);
      
      // Guardar el an√°lisis
      const analysisPath = path.join(this.contextPath, 'refactoring-analysis.md');
      fs.writeFileSync(analysisPath, analysisResult, 'utf-8');
      
      this.log('‚úÖ An√°lisis completado y guardado en context/refactoring-analysis.md');
      this.log('üìã Resumen del an√°lisis:');
      this.log(analysisResult.substring(0, 500) + '...');
      
      // Notificar a otros agentes
      this.sendEvent(AgentEventType.CODE_ANALYZED, {
        target: targetPath,
        analysisPath,
        timestamp: new Date().toISOString()
      });
      
      // Sugerir revisi√≥n de c√≥digo
      this.log('üí° Puedes solicitar una revisi√≥n de c√≥digo con: refactor-agent run "review:' + targetPath + '"');
      
    } catch (error) {
      this.log(`‚ùå Error al analizar el c√≥digo: ${error}`, 'error');
      throw error;
    }
  }
  
  /**
   * Aplica refactorizaciones espec√≠ficas
   */
  private async applyRefactoring(refactorSpec: string, coreContext: string, rulesContext: string): Promise<void> {
    this.log(`üîß Aplicando refactorizaci√≥n: ${refactorSpec}`);
    
    // Determinar si es un archivo espec√≠fico o una refactorizaci√≥n general
    let targetPath: string;
    let refactoringType: string;
    
    if (refactorSpec.includes(':')) {
      const [type, path] = refactorSpec.split(':', 2);
      refactoringType = type.trim();
      targetPath = path.trim();
    } else {
      // Si no se especifica un tipo, asumir que es una ruta
      refactoringType = 'general';
      targetPath = refactorSpec;
    }
    
    // Verificar que la ruta existe
    const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
    
    if (!fs.existsSync(fullPath)) {
      this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
      return;
    }
    
    // Leer el archivo o archivos
    let fileContents: Record<string, string> = {};
    
    if (fs.statSync(fullPath).isDirectory()) {
      // Es un directorio, buscar archivos seg√∫n el tipo de refactorizaci√≥n
      let pattern = '**/*.{ts,tsx,js,jsx}';
      
      if (refactoringType === 'react') {
        pattern = '**/*.{tsx,jsx}';
      } else if (refactoringType === 'api') {
        pattern = '**/api/**/*.{ts,js}';
      } else if (refactoringType === 'model') {
        pattern = '**/models/**/*.{ts,js}';
      } else if (refactoringType === 'accessibility') {
        pattern = '**/*.{tsx,jsx,html,css,scss}';
      }
      
      const files = glob.sync(pattern, { cwd: fullPath, absolute: true });
      
      files.forEach(file => {
        try {
          fileContents[file] = fs.readFileSync(file, 'utf-8');
        } catch (error) {
          this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
        }
      });
      
      if (Object.keys(fileContents).length === 0) {
        this.log('‚ö†Ô∏è No se encontraron archivos para refactorizar', 'warning');
        return;
      }
    } else {
      // Es un archivo individual
      fileContents[fullPath] = fs.readFileSync(fullPath, 'utf-8');
    }
    
    // Crear prompt para el LLM seg√∫n el tipo de refactorizaci√≥n
    let refactoringPrompt = `
    # Contexto del Proyecto
    ${coreContext}
    
    # Reglas Arquitect√≥nicas
    ${rulesContext}
    
    # Tarea de Refactorizaci√≥n de C√≥digo
    Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es refactorizar el siguiente c√≥digo.
    `;
    
    // A√±adir instrucciones espec√≠ficas seg√∫n el tipo de refactorizaci√≥n
    if (refactoringType === 'solid') {
      refactoringPrompt += `
      ## Tipo de Refactorizaci√≥n: Principios SOLID
      Aplica los principios SOLID al siguiente c√≥digo:
      - Single Responsibility Principle: Cada clase debe tener una √∫nica responsabilidad
      - Open/Closed Principle: Las entidades deben estar abiertas para extensi√≥n pero cerradas para modificaci√≥n
      - Liskov Substitution Principle: Los objetos de una superclase deben poder ser reemplazados por objetos de una subclase sin afectar la funcionalidad
      - Interface Segregation Principle: Muchas interfaces espec√≠ficas son mejores que una interfaz general
      - Dependency Inversion Principle: Depender de abstracciones, no de implementaciones concretas
      `;
    } else if (refactoringType === 'performance') {
      refactoringPrompt += `
      ## Tipo de Refactorizaci√≥n: Optimizaci√≥n de Rendimiento
      Optimiza el rendimiento del siguiente c√≥digo:
      - Reduce la complejidad algor√≠tmica
      - Minimiza operaciones costosas
      - Optimiza el uso de memoria
      - Evita c√°lculos redundantes
      - Mejora la eficiencia de bucles y operaciones
      - Implementa t√©cnicas de memoizaci√≥n y cach√© cuando sea apropiado
      - Optimiza las operaciones as√≠ncronas y promesas
      `;
    } else if (refactoringType === 'clean') {
      refactoringPrompt += `
      ## Tipo de Refactorizaci√≥n: Clean Code
      Aplica principios de Clean Code al siguiente c√≥digo:
      - Nombres significativos para variables, funciones y clases
      - Funciones peque√±as y con un solo prop√≥sito
      - Comentarios solo cuando son necesarios
      - Formato consistente
      - Manejo adecuado de errores
      - Eliminaci√≥n de c√≥digo duplicado
      - Organizaci√≥n l√≥gica de c√≥digo
      `;
    } else if (refactoringType === 'accessibility') {
      refactoringPrompt += `
      ## Tipo de Refactorizaci√≥n: Accesibilidad
      Mejora la accesibilidad del siguiente c√≥digo:
      - A√±ade atributos ARIA apropiados
      - Asegura un orden de tabulaci√≥n l√≥gico
      - Implementa etiquetas y descripciones adecuadas
      - Mejora el contraste y la legibilidad
      - Asegura compatibilidad con lectores de pantalla
      - Implementa navegaci√≥n por teclado
      - Sigue las pautas WCAG 2.1 nivel AA
      `;
    } else if (refactoringType === 'patterns') {
      refactoringPrompt += `
      ## Tipo de Refactorizaci√≥n: Patrones de Dise√±o
      Aplica patrones de dise√±o apropiados al siguiente c√≥digo:
      - Identifica oportunidades para aplicar patrones creacionales (Factory, Singleton, Builder)
      - Implementa patrones estructurales cuando sea apropiado (Adapter, Decorator, Composite)
      - Utiliza patrones de comportamiento para mejorar la interacci√≥n (Observer, Strategy, Command)
      - Refactoriza hacia arquitecturas como MVC, MVVM o Flux/Redux cuando sea beneficioso
      `;
    } else {
      refactoringPrompt += `
      ## Tipo de Refactorizaci√≥n: General
      Mejora la calidad general del siguiente c√≥digo:
      - Aplica patrones de dise√±o apropiados
      - Mejora la legibilidad y mantenibilidad
      - Reduce la complejidad
      - Elimina c√≥digo duplicado
      - Optimiza el rendimiento cuando sea posible
      - Mejora la estructura y organizaci√≥n
      - Implementa mejores pr√°cticas espec√≠ficas del lenguaje
      `;
    }
    
    // A√±adir los archivos a refactorizar
    refactoringPrompt += `
    ## Archivos a Refactorizar
    ${Object.entries(fileContents).map(([file, content]) => `
    ### ${path.basename(file)}
    \`\`\`${path.extname(file).substring(1)}
    ${content}
    \`\`\`
    `).join('\n')}
    
    ## Instrucciones
    1. Proporciona la versi√≥n refactorizada de cada archivo
    2. Explica los cambios realizados y por qu√© mejoran el c√≥digo
    3. Mant√©n la funcionalidad original intacta
    4. Incluye m√©tricas de mejora esperadas (cuando sea posible)
    
    Para cada archivo, proporciona el c√≥digo refactorizado en un bloque de c√≥digo con el formato:
    \`\`\`${path.extname(Object.keys(fileContents)[0]).substring(1)}:RUTA_COMPLETA_AL_ARCHIVO
    // C√≥digo refactorizado
    \`\`\`
    `;
    
    try {
      // Consultar al LLM
      const refactoringResult = await this.queryLLM(refactoringPrompt);
      
      // Extraer bloques de c√≥digo de la respuesta
      const codeBlocks = this.extractCodeBlocks(refactoringResult);
      
      if (codeBlocks.length === 0) {
        this.log('‚ö†Ô∏è No se encontraron bloques de c√≥digo en la respuesta', 'warning');
        
        // Guardar la respuesta completa para referencia
        const resultPath = path.join(this.contextPath, 'refactoring-result.md');
        fs.writeFileSync(resultPath, refactoringResult, 'utf-8');
        this.log(`üìù Respuesta guardada en ${resultPath}`);
        return;
      }
      
      // Aplicar los cambios
      const changes: string[] = [];
      
      for (const { filePath, code } of codeBlocks) {
        const originalFile = Object.keys(fileContents).find(f => 
          f === filePath || path.basename(f) === path.basename(filePath)
        );
        
        if (!originalFile) {
          this.log(`‚ö†Ô∏è No se encontr√≥ el archivo original para ${filePath}`, 'warning');
          continue;
        }
        
        // En modo dry-run, solo mostrar los cambios
        if (this.dryRun) {
          this.log(`üîç Cambios propuestos para ${originalFile}:`);
          this.log('-------------------------------------------');
          this.log(code.substring(0, 500) + (code.length > 500 ? '...' : ''));
          this.log('-------------------------------------------');
          changes.push(originalFile);
        } else {
          // Aplicar los cambios al archivo
          fs.writeFileSync(originalFile, code, 'utf-8');
          this.log(`‚úÖ Archivo refactorizado: ${originalFile}`);
          changes.push(originalFile);
        }
      }
      
      // Guardar el informe completo
      const reportPath = path.join(this.contextPath, 'refactoring-report.md');
      fs.writeFileSync(reportPath, refactoringResult, 'utf-8');
      
      // Notificar a otros agentes
      this.sendEvent(AgentEventType.CODE_REFACTORED, {
        target: targetPath,
        type: refactoringType,
        changes,
        dryRun: this.dryRun,
        reportPath,
        timestamp: new Date().toISOString()
      });
      
      // Solicitar revisi√≥n de c√≥digo si est√° disponible
      this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
        target: targetPath,
        changes,
        reportPath,
        timestamp: new Date().toISOString(),
        requestedBy: this.name
      });
      
      if (this.dryRun) {
        this.log('‚úÖ Simulaci√≥n de refactorizaci√≥n completada. Revisa los cambios propuestos.');
      } else {
        this.log('‚úÖ Refactorizaci√≥n completada. Archivos actualizados.');
        this.log('üí° Se ha solicitado una revisi√≥n de c√≥digo para validar los cambios.');
      }
      
      // Resetear el modo dry-run
      this.dryRun = false;
      
    } catch (error) {
      this.log(`‚ùå Error al aplicar la refactorizaci√≥n: ${error}`, 'error');
      throw error;
    }
  }
  
  /**
   * Estandariza el c√≥digo seg√∫n un patr√≥n espec√≠fico
   */
  private async standardizeCode(pattern: string, coreContext: string, rulesContext: string): Promise<void> {
    this.log(`üìê Estandarizando c√≥digo seg√∫n patr√≥n: ${pattern}`);
    
    // Determinar los archivos a estandarizar
    let filesToStandardize: string[] = [];
    
    if (pattern.includes('*')) {
      // Es un patr√≥n glob
      filesToStandardize = glob.sync(pattern, { cwd: this.codebasePath, absolute: true });
    } else if (fs.existsSync(pattern)) {
      // Es una ruta espec√≠fica
      const fullPath = path.isAbsolute(pattern) ? pattern : path.join(this.codebasePath, pattern);
      
      if (fs.statSync(fullPath).isDirectory()) {
        // Es un directorio, buscar todos los archivos TypeScript/JavaScript
        filesToStandardize = glob.sync('**/*.{ts,tsx,js,jsx}', { cwd: fullPath, absolute: true });
      } else {
        // Es un archivo individual
        filesToStandardize = [fullPath];
      }
    } else {
      this.log(`‚ùå Patr√≥n o ruta no v√°lida: ${pattern}`, 'error');
      return;
    }
    
    if (filesToStandardize.length === 0) {
      this.log('‚ö†Ô∏è No se encontraron archivos para estandarizar', 'warning');
      return;
    }
    
    this.log(`üìä Estandarizando ${filesToStandardize.length} archivos...`);
    
    // Agrupar archivos por tipo para procesarlos en lotes
    const filesByType: Record<string, string[]> = {};
    
    filesToStandardize.forEach(file => {
      const ext = path.extname(file);
      if (!filesByType[ext]) {
        filesByType[ext] = [];
      }
      filesByType[ext].push(file);
    });
    
    // Procesar cada tipo de archivo
    for (const [fileType, files] of Object.entries(filesByType)) {
      this.log(`üîÑ Procesando ${files.length} archivos ${fileType}...`);
      
      // Procesar en lotes para no sobrecargar al LLM
      const batchSize = 5;
      for (let i = 0; i < files.length; i += batchSize) {
        const batch = files.slice(i, i + batchSize);
        await this.standardizeBatch(batch, fileType, coreContext, rulesContext);
      }
    }
    
    this.log('‚úÖ Estandarizaci√≥n completada');
    
    // Notificar a otros agentes
    this.sendEvent(AgentEventType.CODE_STANDARDIZED, {
      pattern,
      count: filesToStandardize.length,
      timestamp: new Date().toISOString()
    });
  }
  
  /**
   * Estandariza un lote de archivos del mismo tipo
   */
  private async standardizeBatch(files: string[], fileType: string, coreContext: string, rulesContext: string): Promise<void> {
    // Leer el contenido de los archivos
    const fileContents: Record<string, string> = {};
    files.forEach(file => {
      try {
        fileContents[file] = fs.readFileSync(file, 'utf-8');
      } catch (error) {
        this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
      }
    });
    
    // Crear prompt para el LLM
    const standardizationPrompt = `
    # Contexto del Proyecto
    ${coreContext}
    
    # Reglas Arquitect√≥nicas
    ${rulesContext}
    
    # Tarea de Estandarizaci√≥n de C√≥digo
    Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es estandarizar el siguiente c√≥digo para que siga un formato y estructura consistentes.
    
    ## Archivos a Estandarizar
    ${Object.entries(fileContents).map(([file, content]) => `
    ### ${path.basename(file)}
    \`\`\`${fileType.substring(1)}
    ${content}
    \`\`\`
    `).join('\n')}
    
    ## Reglas de Estandarizaci√≥n
    1. Estructura consistente de importaciones (primero librer√≠as externas, luego internas)
    2. Formato consistente (indentaci√≥n, espacios, l√≠neas en blanco)
    3. Convenciones de nomenclatura consistentes
    4. Documentaci√≥n de clases y m√©todos con formato JSDoc
    5. Organizaci√≥n consistente de m√©todos (p√∫blicos primero, luego protegidos, luego privados)
    6. Manejo de errores consistente
    7. Uso consistente de tipos y interfaces en TypeScript
    8. Patrones de dise√±o consistentes
    9. Formato de comentarios uniforme
    
    Para cada archivo, proporciona el c√≥digo estandarizado en un bloque de c√≥digo con el formato:
    \`\`\`${fileType.substring(1)}:RUTA_COMPLETA_AL_ARCHIVO
    // C√≥digo estandarizado
    \`\`\`
    `;
    
    try {
      // Consultar al LLM
      const standardizationResult = await this.queryLLM(standardizationPrompt);
      
            // Extraer bloques de c√≥digo de la respuesta
            const codeBlocks = this.extractCodeBlocks(refactoringResult);
      
            if (codeBlocks.length === 0) {
              this.log('‚ö†Ô∏è No se encontraron bloques de c√≥digo en la respuesta', 'warning');
              
              // Guardar la respuesta completa para referencia
              const resultPath = path.join(this.contextPath, 'refactoring-result.md');
              fs.writeFileSync(resultPath, refactoringResult, 'utf-8');
              this.log(`üìù Respuesta guardada en ${resultPath}`);
              return;
            }
            
            // Aplicar los cambios
            const changes: string[] = [];
            
            for (const { filePath, code } of codeBlocks) {
              const originalFile = Object.keys(fileContents).find(f => 
                f === filePath || path.basename(f) === path.basename(filePath)
              );
              
              if (!originalFile) {
                this.log(`‚ö†Ô∏è No se encontr√≥ el archivo original para ${filePath}`, 'warning');
                continue;
              }
              
              // En modo dry-run, solo mostrar los cambios
              if (this.dryRun) {
                this.log(`üîç Cambios propuestos para ${originalFile}:`);
                this.log('-------------------------------------------');
                this.log(code.substring(0, 500) + (code.length > 500 ? '...' : ''));
                this.log('-------------------------------------------');
                changes.push(originalFile);
              } else {
                // Aplicar los cambios al archivo
                fs.writeFileSync(originalFile, code, 'utf-8');
                this.log(`‚úÖ Archivo refactorizado: ${originalFile}`);
                changes.push(originalFile);
              }
            }
            
            // Guardar el informe completo
            const reportPath = path.join(this.contextPath, 'refactoring-report.md');
            fs.writeFileSync(reportPath, refactoringResult, 'utf-8');
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.CODE_REFACTORED, {
              target: targetPath,
              type: refactoringType,
              changes,
              dryRun: this.dryRun,
              reportPath,
              timestamp: new Date().toISOString()
            });
            
            // Solicitar revisi√≥n de c√≥digo si est√° disponible
            this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
              target: targetPath,
              changes,
              reportPath,
              timestamp: new Date().toISOString(),
              requestedBy: this.name
            });
            
            if (this.dryRun) {
              this.log('‚úÖ Simulaci√≥n de refactorizaci√≥n completada. Revisa los cambios propuestos.');
            } else {
              this.log('‚úÖ Refactorizaci√≥n completada. Archivos actualizados.');
              this.log('üí° Se ha solicitado una revisi√≥n de c√≥digo para validar los cambios.');
            }
            
            // Resetear el modo dry-run
            this.dryRun = false;
            
          } catch (error) {
            this.log(`‚ùå Error al aplicar la refactorizaci√≥n: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Implementa un patr√≥n de dise√±o espec√≠fico
         */
        private async implementPattern(patternSpec: string, coreContext: string, rulesContext: string): Promise<void> {
          this.log(`üß© Implementando patr√≥n de dise√±o: ${patternSpec}`);
          
          // Determinar el tipo de patr√≥n y la ruta objetivo
          let patternType: string;
          let targetPath: string;
          
          if (patternSpec.includes(':')) {
            const [type, path] = patternSpec.split(':', 2);
            patternType = type.trim();
            targetPath = path.trim();
          } else {
            // Si no se especifica un tipo, asumir que es un patr√≥n general
            patternType = 'general';
            targetPath = patternSpec;
          }
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Leer el archivo o archivos
          let fileContents: Record<string, string> = {};
          
          if (fs.statSync(fullPath).isDirectory()) {
            // Es un directorio, buscar archivos seg√∫n el tipo de patr√≥n
            let pattern = '**/*.{ts,tsx,js,jsx}';
            
            if (patternType === 'react') {
              pattern = '**/*.{tsx,jsx}';
            } else if (patternType === 'api') {
              pattern = '**/api/**/*.{ts,js}';
            } else if (patternType === 'model') {
              pattern = '**/models/**/*.{ts,js}';
            }
            
            const files = glob.sync(pattern, { cwd: fullPath, absolute: true });
            
            files.forEach(file => {
              try {
                fileContents[file] = fs.readFileSync(file, 'utf-8');
              } catch (error) {
                this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
              }
            });
            
            if (Object.keys(fileContents).length === 0) {
              this.log('‚ö†Ô∏è No se encontraron archivos para aplicar el patr√≥n', 'warning');
              return;
            }
          } else {
            // Es un archivo individual
            fileContents[fullPath] = fs.readFileSync(fullPath, 'utf-8');
          }
          
          // Crear prompt para el LLM seg√∫n el tipo de patr√≥n
          let patternPrompt = `
          # Contexto del Proyecto
          ${coreContext}
          
          # Reglas Arquitect√≥nicas
          ${rulesContext}
          
          # Tarea de Implementaci√≥n de Patr√≥n de Dise√±o
          Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es implementar un patr√≥n de dise√±o en el siguiente c√≥digo.
          `;
          
          // A√±adir instrucciones espec√≠ficas seg√∫n el tipo de patr√≥n
          if (patternType === 'factory') {
            patternPrompt += `
            ## Tipo de Patr√≥n: Factory
            Implementa el patr√≥n Factory en el siguiente c√≥digo:
            - Crea una clase Factory que encapsule la creaci√≥n de objetos
            - Usa m√©todos est√°ticos o de instancia para crear objetos
            - Permite la extensibilidad para nuevos tipos de objetos
            - Oculta la l√≥gica de creaci√≥n de objetos
            - Considera usar Factory Method o Abstract Factory seg√∫n sea apropiado
            `;
          } else if (patternType === 'singleton') {
            patternPrompt += `
            ## Tipo de Patr√≥n: Singleton
            Implementa el patr√≥n Singleton en el siguiente c√≥digo:
            - Asegura que solo exista una instancia de la clase
            - Proporciona un punto de acceso global a esa instancia
            - Implementa inicializaci√≥n perezosa (lazy initialization)
            - Considera la seguridad en entornos multihilo si es relevante
            - Usa una implementaci√≥n moderna y segura del patr√≥n
            `;
          } else if (patternType === 'observer') {
            patternPrompt += `
            ## Tipo de Patr√≥n: Observer
            Implementa el patr√≥n Observer en el siguiente c√≥digo:
            - Define una dependencia uno-a-muchos entre objetos
            - Cuando un objeto cambia de estado, todos sus dependientes son notificados
            - Implementa interfaces o clases abstractas para Subject y Observer
            - Permite a√±adir y eliminar observadores din√°micamente
            - Considera usar eventos o callbacks para la notificaci√≥n
            `;
          } else if (patternType === 'strategy') {
            patternPrompt += `
            ## Tipo de Patr√≥n: Strategy
            Implementa el patr√≥n Strategy en el siguiente c√≥digo:
            - Define una familia de algoritmos encapsulados
            - Hace los algoritmos intercambiables
            - Permite que el algoritmo var√≠e independientemente de los clientes que lo usan
            - Usa composici√≥n en lugar de herencia
            - Considera usar funciones o clases para las estrategias
            `;
          } else if (patternType === 'decorator') {
            patternPrompt += `
            ## Tipo de Patr√≥n: Decorator
            Implementa el patr√≥n Decorator en el siguiente c√≥digo:
            - A√±ade responsabilidades a objetos din√°micamente
            - Proporciona una alternativa flexible a la herencia
            - Sigue el principio de responsabilidad √∫nica
            - Permite combinar comportamientos
            - Considera usar composici√≥n y delegaci√≥n
            `;
          } else if (patternType === 'mvc' || patternType === 'mvvm') {
            patternPrompt += `
            ## Tipo de Patr√≥n: ${patternType.toUpperCase()}
            Implementa el patr√≥n ${patternType.toUpperCase()} en el siguiente c√≥digo:
            - Separa la l√≥gica de negocio de la interfaz de usuario
            - Define claramente las responsabilidades de cada componente
            - Implementa el flujo de datos y eventos apropiado
            - Asegura que los componentes sean testables
            - Considera la reactividad y la actualizaci√≥n de la UI
            `;
          } else {
            patternPrompt += `
            ## Tipo de Patr√≥n: General
            Analiza el c√≥digo y determina qu√© patr√≥n de dise√±o ser√≠a m√°s apropiado implementar. Considera:
            - Patrones creacionales (Factory, Builder, Singleton, Prototype)
            - Patrones estructurales (Adapter, Bridge, Composite, Decorator, Facade, Proxy)
            - Patrones de comportamiento (Chain of Responsibility, Command, Iterator, Observer, Strategy, Template Method)
            - Patrones arquitect√≥nicos (MVC, MVVM, MVP, Clean Architecture, Hexagonal)
            
            Implementa el patr√≥n que mejor se adapte al c√≥digo y explica por qu√© lo elegiste.
            `;
          }
          
          // A√±adir los archivos a refactorizar
          patternPrompt += `
          ## Archivos a Refactorizar
          ${Object.entries(fileContents).map(([file, content]) => `
          ### ${path.basename(file)}
          \`\`\`${path.extname(file).substring(1)}
          ${content}
          \`\`\`
          `).join('\n')}
          
          ## Instrucciones
          1. Implementa el patr√≥n de dise√±o en el c√≥digo
          2. Proporciona la versi√≥n refactorizada de cada archivo
          3. Explica c√≥mo se ha implementado el patr√≥n y sus beneficios
          4. Mant√©n la funcionalidad original intacta
          5. Considera crear nuevos archivos si es necesario para una mejor organizaci√≥n
          
          Para cada archivo, proporciona el c√≥digo refactorizado en un bloque de c√≥digo con el formato:
          \`\`\`${path.extname(Object.keys(fileContents)[0]).substring(1)}:RUTA_COMPLETA_AL_ARCHIVO
          // C√≥digo refactorizado
          \`\`\`
          
          Si necesitas crear nuevos archivos, indica la ruta completa y el contenido:
          \`\`\`${path.extname(Object.keys(fileContents)[0]).substring(1)}:RUTA_COMPLETA_AL_NUEVO_ARCHIVO
          // C√≥digo del nuevo archivo
          \`\`\`
          `;
          
          try {
            // Consultar al LLM
            const patternResult = await this.queryLLM(patternPrompt);
            
            // Extraer bloques de c√≥digo de la respuesta
            const codeBlocks = this.extractCodeBlocks(patternResult);
            
            if (codeBlocks.length === 0) {
              this.log('‚ö†Ô∏è No se encontraron bloques de c√≥digo en la respuesta', 'warning');
              
              // Guardar la respuesta completa para referencia
              const resultPath = path.join(this.contextPath, 'pattern-implementation-result.md');
              fs.writeFileSync(resultPath, patternResult, 'utf-8');
              this.log(`üìù Respuesta guardada en ${resultPath}`);
              return;
            }
            
            // Aplicar los cambios
            const changes: string[] = [];
            
            for (const { filePath, code } of codeBlocks) {
              // Determinar si es un archivo existente o nuevo
              const isExistingFile = Object.keys(fileContents).some(f => 
                f === filePath || path.basename(f) === path.basename(filePath)
              );
              
              // Crear directorio si no existe
              const directory = path.dirname(filePath);
              if (!fs.existsSync(directory)) {
                fs.mkdirSync(directory, { recursive: true });
                this.log(`üìÅ Creado directorio: ${directory}`);
              }
              
              // Guardar el archivo
              fs.writeFileSync(filePath, code, 'utf-8');
              
              if (isExistingFile) {
                this.log(`‚úÖ Archivo actualizado: ${filePath}`);
              } else {
                this.log(`‚úÖ Archivo creado: ${filePath}`);
              }
              
              changes.push(filePath);
            }
            
            // Guardar el informe completo
            const reportPath = path.join(this.contextPath, 'pattern-implementation-report.md');
            fs.writeFileSync(reportPath, patternResult, 'utf-8');
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.CODE_REFACTORED, {
              target: targetPath,
              type: `pattern:${patternType}`,
              changes,
              reportPath,
              timestamp: new Date().toISOString()
            });
            
            // Solicitar revisi√≥n de c√≥digo
            this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
              target: targetPath,
              changes,
              reportPath,
              timestamp: new Date().toISOString(),
              requestedBy: this.name
            });
            
            this.log('‚úÖ Implementaci√≥n de patr√≥n completada. Archivos actualizados.');
            this.log('üí° Se ha solicitado una revisi√≥n de c√≥digo para validar los cambios.');
            
          } catch (error) {
            this.log(`‚ùå Error al implementar el patr√≥n: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Mejora la accesibilidad del c√≥digo
         */
        private async improveAccessibility(accessibilitySpec: string, coreContext: string, rulesContext: string): Promise<void> {
          this.log(`‚ôø Mejorando accesibilidad: ${accessibilitySpec}`);
          
          // Determinar la ruta objetivo
          let targetPath = accessibilitySpec;
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Leer el archivo o archivos
          let fileContents: Record<string, string> = {};
          
          if (fs.statSync(fullPath).isDirectory()) {
            // Es un directorio, buscar archivos relevantes para accesibilidad
            const pattern = '**/*.{tsx,jsx,html,css,scss}';
            const files = glob.sync(pattern, { cwd: fullPath, absolute: true });
            
            files.forEach(file => {
              try {
                fileContents[file] = fs.readFileSync(file, 'utf-8');
              } catch (error) {
                this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
              }
            });
            
            if (Object.keys(fileContents).length === 0) {
              this.log('‚ö†Ô∏è No se encontraron archivos para mejorar accesibilidad', 'warning');
              return;
            }
          } else {
            // Es un archivo individual
            fileContents[fullPath] = fs.readFileSync(fullPath, 'utf-8');
          }
          
          // Crear prompt para el LLM
          const accessibilityPrompt = `
          # Contexto del Proyecto
          ${coreContext}
          
          # Reglas Arquitect√≥nicas
          ${rulesContext}
          
          # Tarea de Mejora de Accesibilidad
          Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es mejorar la accesibilidad del siguiente c√≥digo para cumplir con las pautas WCAG 2.1 nivel AA.
          
          ## Archivos a Mejorar
          ${Object.entries(fileContents).map(([file, content]) => `
          ### ${path.basename(file)}
          \`\`\`${path.extname(file).substring(1)}
          ${content}
          \`\`\`
          `).join('\n')}
          
          ## Instrucciones
          1. Mejora la accesibilidad del c√≥digo siguiendo las pautas WCAG 2.1 nivel AA
          2. Implementa las siguientes mejoras:
             - A√±ade atributos ARIA apropiados
             - Asegura un orden de tabulaci√≥n l√≥gico
             - Implementa etiquetas y descripciones adecuadas
             - Mejora el contraste y la legibilidad
             - Asegura compatibilidad con lectores de pantalla
             - Implementa navegaci√≥n por teclado
             - A√±ade textos alternativos para im√°genes
             - Asegura que los formularios sean accesibles
             - Implementa mensajes de error claros
             - Asegura que los componentes interactivos sean identificables
          3. Proporciona la versi√≥n mejorada de cada archivo
          4. Explica las mejoras realizadas y c√≥mo benefician a la accesibilidad
          
          Para cada archivo, proporciona el c√≥digo mejorado en un bloque de c√≥digo con el formato:
          \`\`\`${path.extname(Object.keys(fileContents)[0]).substring(1)}:RUTA_COMPLETA_AL_ARCHIVO
          // C√≥digo mejorado
          \`\`\`
          `;
          
          try {
            // Consultar al LLM
            const accessibilityResult = await this.queryLLM(accessibilityPrompt);
            
            // Extraer bloques de c√≥digo de la respuesta
            const codeBlocks = this.extractCodeBlocks(accessibilityResult);
            
            if (codeBlocks.length === 0) {
              this.log('‚ö†Ô∏è No se encontraron bloques de c√≥digo en la respuesta', 'warning');
              
              // Guardar la respuesta completa para referencia
              const resultPath = path.join(this.contextPath, 'accessibility-improvement-result.md');
              fs.writeFileSync(resultPath, accessibilityResult, 'utf-8');
              this.log(`üìù Respuesta guardada en ${resultPath}`);
              return;
            }
            
            // Aplicar los cambios
            const changes: string[] = [];
            
            for (const { filePath, code } of codeBlocks) {
              const originalFile = Object.keys(fileContents).find(f => 
                f === filePath || path.basename(f) === path.basename(filePath)
              );
              
              if (!originalFile) {
                this.log(`‚ö†Ô∏è No se encontr√≥ el archivo original para ${filePath}`, 'warning');
                continue;
              }
              
              // Aplicar los cambios al archivo
              fs.writeFileSync(originalFile, code, 'utf-8');
              this.log(`‚úÖ Archivo mejorado para accesibilidad: ${originalFile}`);
              changes.push(originalFile);
            }
            
            // Guardar el informe completo
            const reportPath = path.join(this.contextPath, 'accessibility-improvement-report.md');
            fs.writeFileSync(reportPath, accessibilityResult, 'utf-8');
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.CODE_REFACTORED, {
              target: targetPath,
              type: 'accessibility',
              changes,
              reportPath,
              timestamp: new Date().toISOString()
            });
            
            // Solicitar revisi√≥n de c√≥digo
            this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
              target: targetPath,
              changes,
              reportPath,
              timestamp: new Date().toISOString(),
              requestedBy: this.name
            });
            
            this.log('‚úÖ Mejoras de accesibilidad completadas. Archivos actualizados.');
            this.log('üí° Se ha solicitado una revisi√≥n de c√≥digo para validar los cambios.');
            
          } catch (error) {
            this.log(`‚ùå Error al mejorar la accesibilidad: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Calcula m√©tricas de c√≥digo
         */
        private async calculateMetrics(metricsSpec: string, coreContext: string, rulesContext: string): Promise<void> {
          this.log(`üìä Calculando m√©tricas para: ${metricsSpec}`);
          
          if (!this.metricsEnabled) {
            this.log('‚ö†Ô∏è Las m√©tricas est√°n desactivadas. Act√≠valas con "metrics:enable"', 'warning');
            return;
          }
          
          // Verificar si es un comando especial
          if (metricsSpec === 'enable') {
            this.metricsEnabled = true;
            this.log('‚úÖ M√©tricas activadas');
            return;
          } else if (metricsSpec === 'disable') {
            this.metricsEnabled = false;
            this.log('‚úÖ M√©tricas desactivadas');
            return;
          }
          
          // Determinar la ruta objetivo
          let targetPath = metricsSpec;
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Determinar si es un archivo o directorio
          const isDirectory = fs.statSync(fullPath).isDirectory();
          
          // Obtener archivos a analizar
          const filesToAnalyze: string[] = [];
          
          if (isDirectory) {
            // Buscar archivos TypeScript/JavaScript en el directorio
            const files = glob.sync('**/*.{ts,tsx,js,jsx}', { cwd: fullPath, absolute: true });
            filesToAnalyze.push(...files);
          } else {
            filesToAnalyze.push(fullPath);
          }
          
          if (filesToAnalyze.length === 0) {
            this.log('‚ö†Ô∏è No se encontraron archivos para analizar', 'warning');
            return;
          }
          
          this.log(`üìä Analizando ${filesToAnalyze.length} archivos...`);
          
          // Leer el contenido de los archivos
          const fileContents: Record<string, string> = {};
          filesToAnalyze.forEach(file => {
            try {
              fileContents[file] = fs.readFileSync(file, 'utf-8');
            } catch (error) {
              this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
            }
          });
          
          // Crear prompt para el LLM
          const metricsPrompt = `
          # Contexto del Proyecto
          ${coreContext}
          
          # Reglas Arquitect√≥nicas
          ${rulesContext}
          
          # Tarea de C√°lculo de M√©tricas de C√≥digo
          Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es analizar el siguiente c√≥digo y calcular m√©tricas de calidad.
          
          ## Archivos a Analizar
          ${Object.entries(fileContents).map(([file, content]) => `
          ### ${path.basename(file)}
          \`\`\`${path.extname(file).substring(1)}
          ${content}
          \`\`\`
          `).join('\n')}
          
          ## Instrucciones
          1. Calcula las siguientes m√©tricas para cada archivo:
             - Complejidad ciclom√°tica
             - L√≠neas de c√≥digo (LOC)
             - L√≠neas de c√≥digo efectivas (sin comentarios ni l√≠neas en blanco)
             - N√∫mero de funciones/m√©todos
             - Longitud promedio de funciones/m√©todos
             - N√∫mero de clases
             - N√∫mero de importaciones
             - Deuda t√©cnica estimada (en horas)
             - √çndice de mantenibilidad (0-100)
             - Duplicaci√≥n de c√≥digo (porcentaje)
             - Violaciones de principios SOLID
             - Problemas de accesibilidad (si aplica)
          2. Proporciona un resumen general de las m√©tricas
          3. Identifica √°reas problem√°ticas y sugiere mejoras
          4. Calcula un puntaje general de calidad (0-100)
          
          Estructura tu respuesta en formato Markdown con las siguientes secciones:
          1. Resumen Ejecutivo
          2. M√©tricas por Archivo
          3. √Åreas Problem√°ticas
          4. Recomendaciones de Mejora
          5. Puntaje General de Calidad
          `;
          
          try {
            // Consultar al LLM
            const metricsResult = await this.queryLLM(metricsPrompt);
            
            // Guardar el resultado
            const metricsPath = path.join(this.contextPath, 'code-metrics.md');
            fs.writeFileSync(metricsPath, metricsResult, 'utf-8');
            
            this.log('‚úÖ M√©tricas calculadas y guardadas en context/code-metrics.md');
            this.log('üìã Resumen de m√©tricas:');
            this.log(metricsResult.substring(0, 500) + '...');
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.METRICS_CALCULATED, {
              target: targetPath,
              metricsPath,
              timestamp: new Date().toISOString()
            });
            
          } catch (error) {
            this.log(`‚ùå Error al calcular m√©tricas: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Solicita una revisi√≥n de c√≥digo
         */
        private async requestCodeReview(reviewSpec: string): Promise<void> {
          this.log(`üìã Solicitando revisi√≥n de c√≥digo para: ${reviewSpec}`);
          
          // Determinar la ruta objetivo
          let targetPath = reviewSpec;
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Notificar a otros agentes
          this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
            target: targetPath,
            timestamp: new Date().toISOString(),
            requestedBy: this.name
          });
          
          this.log('‚úÖ Solicitud de revisi√≥n de c√≥digo enviada.');
          this.log('üí° El CodeReviewAgent procesar√° la solicitud y te notificar√° cuando est√© completa.');
        }
        
        /**
         * Aplica sugerencias de revisi√≥n de c√≥digo
         */
        private async applySuggestions(targetPath: string, suggestions: any[]): Promise<void> {
          this.log(`üîß Aplicando sugerencias de revisi√≥n para: ${targetPath}`);
          
          if (!suggestions || suggestions.length === 0) {
            this.log('‚ö†Ô∏è No hay sugerencias para aplicar', 'warning');
            return;
          }
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Aplicar cada sugerencia
          const changes: string[] = [];
          
          for (const suggestion of suggestions) {
            if (!suggestion.file || !suggestion.changes) {
              this.log(`‚ö†Ô∏è Sugerencia inv√°lida: ${JSON.stringify(suggestion)}`, 'warning');
              continue;
            }
            
            const filePath = path.isAbsolute(suggestion.file) ? suggestion.file : path.join(this.codebasePath, suggestion.file);
            
            if (!fs.existsSync(filePath)) {
              this.log(`‚ö†Ô∏è Archivo no encontrado: ${filePath}`, 'warning');
              continue;
            }
            
            try {
              // Leer el archivo
              let content = fs.readFileSync(filePath, 'utf-8');
              
              // Aplicar los cambios
              if (suggestion.type === 'replace') {
                // Reemplazar todo el contenido
                content = suggestion.changes;
              } else if (suggestion.type === 'line') {
                // Reemplazar l√≠neas espec√≠ficas
                const lines = content.split('\n');
                
                for (const change of suggestion.changes) {
                  if (change.line >= 1 && change.line <= lines.length) {
                    lines[change.line - 1] = change.content;
                  }
                }
                
                content = lines.join('\n');
              } else if (suggestion.type === 'range') {
                // Reemplazar un rango de l√≠neas
                const lines = content.split('\n');
                
                for (const change of suggestion.changes) {
                  if (change.start >= 1 && change.end <= lines.length) {
                    const newLines = change.content.split('\n');
                    lines.splice(change.start - 1, change.end - change.start + 1, ...newLines);
                  }
                }
                
                content = lines.join('\n');
              } else {
                // Tipo de cambio desconocido, usar como reemplazo completo
                this.log(`‚ö†Ô∏è Tipo de cambio desconocido: ${suggestion.type}, usando reemplazo completo`, 'warning');
                content = suggestion.changes;
              }
              
              // Guardar los cambios
              fs.writeFileSync(filePath, content, 'utf-8');
              this.log(`‚úÖ Cambios aplicados a ${filePath}`);
              changes.push(filePath);
              
            } catch (error) {
              this.log(`‚ùå Error al aplicar cambios a ${filePath}: ${error}`, 'error');
            }
          }
          
          if (changes.length > 0) {
            this.log(`‚úÖ Se aplicaron ${changes.length} sugerencias de revisi√≥n`);
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.CODE_UPDATED, {
              target: targetPath,
              changes,
              source: 'code_review',
              timestamp: new Date().toISOString()
            });
          } else {
            this.log('‚ö†Ô∏è No se aplic√≥ ninguna sugerencia', 'warning');
          }
        }
        
        /**
         * Optimiza el rendimiento del c√≥digo
         */
        private async optimizePerformance(optimizationSpec: string, coreContext: string, rulesContext: string): Promise<void> {
          this.log(`‚ö° Optimizando rendimiento para: ${optimizationSpec}`);
          
          // Determinar la ruta objetivo
          let targetPath = optimizationSpec;
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Leer el archivo o archivos
          let fileContents: Record<string, string> = {};
          
          if (fs.statSync(fullPath).isDirectory()) {
            // Es un directorio, buscar archivos relevantes
            const pattern = '**/*.{ts,tsx,js,jsx}';
            const files = glob.sync(pattern, { cwd: fullPath, absolute: true });
            
            files.forEach(file => {
              try {
                fileContents[file] = fs.readFileSync(file, 'utf-8');
              } catch (error) {
                this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
              }
            });
            
            if (Object.keys(fileContents).length === 0) {
              this.log('‚ö†Ô∏è No se encontraron archivos para optimizar', 'warning');
              return;
            }
          } else {
            // Es un archivo individual
            fileContents[fullPath] = fs.readFileSync(fullPath, 'utf-8');
          }
          
          // Crear prompt para el LLM
          const optimizationPrompt = `
          # Contexto del Proyecto
          ${coreContext}
          
          # Reglas Arquitect√≥nicas
          ${rulesContext}
          
          # Tarea de Optimizaci√≥n de Rendimiento
          Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es optimizar el rendimiento del siguiente c√≥digo sin cambiar su funcionalidad.
          
          ## Archivos a Optimizar
          ${Object.entries(fileContents).map(([file, content]) => `
          ### ${path.basename(file)}
          \`\`\`${path.extname(file).substring(1)}
          ${content}
          \`\`\`
          `).join('\n')}
          
          ## Instrucciones
          1. Optimiza el rendimiento del c√≥digo sin cambiar su funcionalidad
          2. Implementa las siguientes optimizaciones:
             - Reduce la complejidad algor√≠tmica (O(n¬≤) ‚Üí O(n log n) ‚Üí O(n))
             - Minimiza las operaciones costosas (I/O, red, DOM)
             - Implementa memoizaci√≥n para c√°lculos repetitivos
             - Optimiza bucles y recursi√≥n
             - Reduce la creaci√≥n de objetos innecesarios
             - Implementa lazy loading donde sea apropiado
             - Optimiza consultas a bases de datos
             - Reduce el tama√±o del bundle (tree-shaking, code-splitting)
             - Implementa paralelizaci√≥n donde sea posible
             - Optimiza el uso de memoria
          3. Proporciona la versi√≥n optimizada de cada archivo
          4. Explica las optimizaciones realizadas y su impacto en el rendimiento
          
          Para cada archivo, proporciona el c√≥digo optimizado en un bloque de c√≥digo con el formato:
          \`\`\`${path.extname(Object.keys(fileContents)[0]).substring(1)}:RUTA_COMPLETA_AL_ARCHIVO
          // C√≥digo optimizado
          \`\`\`
          `;
          
          try {
            // Consultar al LLM
            const optimizationResult = await this.queryLLM(optimizationPrompt);
            
            // Extraer bloques de c√≥digo de la respuesta
            const codeBlocks = this.extractCodeBlocks(optimizationResult);
            
            if (codeBlocks.length === 0) {
              this.log('‚ö†Ô∏è No se encontraron bloques de c√≥digo en la respuesta', 'warning');
              
              // Guardar la respuesta completa para referencia
              const resultPath = path.join(this.contextPath, 'performance-optimization-result.md');
              fs.writeFileSync(resultPath, optimizationResult, 'utf-8');
              this.log(`üìù Respuesta guardada en ${resultPath}`);
              return;
            }
            
            // Aplicar los cambios
            const changes: string[] = [];
            
            for (const { filePath, code } of codeBlocks) {
              const originalFile = Object.keys(fileContents).find(f => 
                f === filePath || path.basename(f) === path.basename(filePath)
              );
              
              if (!originalFile) {
                this.log(`‚ö†Ô∏è No se encontr√≥ el archivo original para ${filePath}`, 'warning');
                continue;
              }
              
              // Aplicar los cambios al archivo
              fs.writeFileSync(originalFile, code, 'utf-8');
              this.log(`‚úÖ Archivo optimizado: ${originalFile}`);
              changes.push(originalFile);
            }
            
            // Guardar el informe completo
            const reportPath = path.join(this.contextPath, 'performance-optimization-report.md');
            fs.writeFileSync(reportPath, optimizationResult, 'utf-8');
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.CODE_REFACTORED, {
              target: targetPath,
              type: 'performance',
              changes,
              reportPath,
              timestamp: new Date().toISOString()
            });
            
            // Solicitar revisi√≥n de c√≥digo
            this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
              target: targetPath,
              changes,
              reportPath,
              timestamp: new Date().toISOString(),
              requestedBy: this.name
            });
            
            this.log('‚úÖ Optimizaci√≥n de rendimiento completada. Archivos actualizados.');
            this.log('üí° Se ha solicitado una revisi√≥n de c√≥digo para validar los cambios.');
            
          } catch (error) {
            this.log(`‚ùå Error al optimizar el rendimiento: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Estandariza el c√≥digo seg√∫n las convenciones del proyecto
         */
        private async standardizeCode(standardizationSpec: string, coreContext: string, rulesContext: string): Promise<void> {
          this.log(`üìè Estandarizando c√≥digo para: ${standardizationSpec}`);
          
          // Determinar la ruta objetivo
          let targetPath = standardizationSpec;
          
          // Verificar que la ruta existe
          const fullPath = path.isAbsolute(targetPath) ? targetPath : path.join(this.codebasePath, targetPath);
          
          if (!fs.existsSync(fullPath)) {
            this.log(`‚ùå Ruta no encontrada: ${fullPath}`, 'error');
            return;
          }
          
          // Leer el archivo o archivos
          let fileContents: Record<string, string> = {};
          
          if (fs.statSync(fullPath).isDirectory()) {
            // Es un directorio, buscar archivos relevantes
            const pattern = '**/*.{ts,tsx,js,jsx,css,scss,html}';
            const files = glob.sync(pattern, { cwd: fullPath, absolute: true });
            
            files.forEach(file => {
              try {
                fileContents[file] = fs.readFileSync(file, 'utf-8');
              } catch (error) {
                this.log(`‚ö†Ô∏è Error al leer archivo ${file}: ${error}`, 'warning');
              }
            });
            
            if (Object.keys(fileContents).length === 0) {
              this.log('‚ö†Ô∏è No se encontraron archivos para estandarizar', 'warning');
              return;
            }
          } else {
            // Es un archivo individual
            fileContents[fullPath] = fs.readFileSync(fullPath, 'utf-8');
          }
          
          // Crear prompt para el LLM
          const standardizationPrompt = `
          # Contexto del Proyecto
          ${coreContext}
          
          # Reglas Arquitect√≥nicas
          ${rulesContext}
          
          # Tarea de Estandarizaci√≥n de C√≥digo
          Act√∫a como el Refactor Agent de CJ.DevMind. Tu tarea es estandarizar el siguiente c√≥digo seg√∫n las convenciones del proyecto.
          
          ## Archivos a Estandarizar
          ${Object.entries(fileContents).map(([file, content]) => `
          ### ${path.basename(file)}
          \`\`\`${path.extname(file).substring(1)}
          ${content}
          \`\`\`
          `).join('\n')}
          
          ## Instrucciones
          1. Estandariza el c√≥digo seg√∫n las siguientes convenciones:
             - Nomenclatura consistente (camelCase para variables y funciones, PascalCase para clases e interfaces)
             - Indentaci√≥n y espaciado uniforme (2 espacios)
             - Uso consistente de comillas (simples para strings)
             - Formato de comentarios estandarizado (JSDoc para funciones y clases)
             - Organizaci√≥n de imports (agrupados por tipo, ordenados alfab√©ticamente)
             - Estructura de archivos consistente (imports, constantes, tipos, funciones, exports)
             - Uso de tipos expl√≠citos en TypeScript
             - Manejo de errores estandarizado
             - Patrones de dise√±o consistentes
             - Estilo CSS/SCSS consistente (BEM o similar)
          2. Proporciona la versi√≥n estandarizada de cada archivo
          3. Explica los cambios realizados y c√≥mo mejoran la consistencia del c√≥digo
          
          Para cada archivo, proporciona el c√≥digo estandarizado en un bloque de c√≥digo con el formato:
          \`\`\`${path.extname(Object.keys(fileContents)[0]).substring(1)}:RUTA_COMPLETA_AL_ARCHIVO
          // C√≥digo estandarizado
          \`\`\`
          `;
          
          try {
            // Consultar al LLM
            const standardizationResult = await this.queryLLM(standardizationPrompt);
            
            // Extraer bloques de c√≥digo de la respuesta
            const codeBlocks = this.extractCodeBlocks(standardizationResult);
            
            if (codeBlocks.length === 0) {
              this.log('‚ö†Ô∏è No se encontraron bloques de c√≥digo en la respuesta', 'warning');
              
              // Guardar la respuesta completa para referencia
              const resultPath = path.join(this.contextPath, 'code-standardization-result.md');
              fs.writeFileSync(resultPath, standardizationResult, 'utf-8');
              this.log(`üìù Respuesta guardada en ${resultPath}`);
              return;
            }
            
            // Aplicar los cambios
            const changes: string[] = [];
            
            for (const { filePath, code } of codeBlocks) {
              const originalFile = Object.keys(fileContents).find(f => 
                f === filePath || path.basename(f) === path.basename(filePath)
              );
              
              if (!originalFile) {
                this.log(`‚ö†Ô∏è No se encontr√≥ el archivo original para ${filePath}`, 'warning');
                continue;
              }
              
              // Aplicar los cambios al archivo
              fs.writeFileSync(originalFile, code, 'utf-8');
              this.log(`‚úÖ Archivo estandarizado: ${originalFile}`);
              changes.push(originalFile);
            }
            
            // Guardar el informe completo
            const reportPath = path.join(this.contextPath, 'code-standardization-report.md');
            fs.writeFileSync(reportPath, standardizationResult, 'utf-8');
            
            // Notificar a otros agentes
            this.sendEvent(AgentEventType.CODE_REFACTORED, {
              target: targetPath,
              type: 'standardization',
              changes,
              reportPath,
              timestamp: new Date().toISOString()
            });
            
            // Solicitar revisi√≥n de c√≥digo
            this.sendEvent(AgentEventType.CODE_REVIEW_REQUESTED, {
              target: targetPath,
              changes,
              reportPath,
              timestamp: new Date().toISOString(),
              requestedBy: this.name
            });
            
            this.log('‚úÖ Estandarizaci√≥n de c√≥digo completada. Archivos actualizados.');
            this.log('üí° Se ha solicitado una revisi√≥n de c√≥digo para validar los cambios.');
            
          } catch (error) {
            this.log(`‚ùå Error al estandarizar el c√≥digo: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Extrae bloques de c√≥digo de una respuesta
         */
        private extractCodeBlocks(text: string): Array<{ filePath: string; code: string }> {
          const codeBlocks: Array<{ filePath: string; code: string }> = [];
          
          // Expresi√≥n regular para encontrar bloques de c√≥digo con ruta de archivo
          // Formato: ```lenguaje:ruta%2Fal%2Farchivo
          // c√≥digo
          // ```
          const regex = /```(?:\w+)?(?::([^\n]+))?\n([\s\S]*?)```/g;
          
          let match;
          while ((match = regex.exec(text)) !== null) {
            const [, filePath, code] = match;
            
            if (filePath && code) {
              codeBlocks.push({
                filePath: filePath.trim(),
                code: code.trim()
              });
            }
          }
          
          return codeBlocks;
        }
        
        /**
         * Consulta al LLM con un prompt
         */
        private async queryLLM(prompt: string): Promise<string> {
          try {
            // Aqu√≠ se implementar√≠a la l√≥gica para consultar al LLM
            // Por ahora, simulamos una respuesta
            
            // En una implementaci√≥n real, se usar√≠a la API del LLM
            // Por ejemplo:
            // const response = await fetch('https://api.openai.com/v1/chat/completions', {
            //   method: 'POST',
            //   headers: {
            //     'Content-Type': 'application/json',
            //     'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`
            //   },
            //   body: JSON.stringify({
            //     model: 'gpt-4',
            //     messages: [
            //       { role: 'system', content: 'Eres un asistente experto en refactorizaci√≥n de c√≥digo.' },
            //       { role: 'user', content: prompt }
            //     ],
            //     temperature: 0.2
            //   })
            // });
            // const data = await response.json();
            // return data.choices[0].message.content;
            
            // Simulaci√≥n de respuesta
            return `An√°lisis completado. Aqu√≠ est√°n los cambios sugeridos:
            
            \`\`\`typescript:${path.join(this.codebasePath, 'example.ts')}
            // C√≥digo refactorizado de ejemplo
            function optimizedFunction() {
              console.log('Este es un ejemplo de c√≥digo refactorizado');
            }
            \`\`\`
            
            Explicaci√≥n de los cambios:
            1. Se ha mejorado la eficiencia del algoritmo
            2. Se ha reducido la complejidad ciclom√°tica
            3. Se ha mejorado la legibilidad del c√≥digo
            `;
          } catch (error) {
            this.log(`‚ùå Error al consultar al LLM: ${error}`, 'error');
            throw error;
          }
        }
        
        /**
         * Registra manejadores de eventos para refactorizaci√≥n
         */
        private registerRefactorEventHandlers(): void {
          // Manejar solicitudes de refactorizaci√≥n
          this.on(AgentEventType.REFACTOR_REQUESTED, async (data: any) => {
            try {
              this.log(`üì• Recibida solicitud de refactorizaci√≥n: ${JSON.stringify(data)}`);
              
              const { target, type } = data;
              
              if (!target) {
                this.log('‚ùå Falta el objetivo de refactorizaci√≥n', 'error');
                return;
              }
              
              // Cargar contexto del proyecto
              const coreContext = await this.loadContext('core');
              const rulesContext = await this.loadContext('rules');
              
              // Ejecutar la refactorizaci√≥n seg√∫n el tipo
              if (type === 'pattern') {
                await this.implementPattern(target, coreContext, rulesContext);
              } else if (type === 'accessibility') {
                await this.improveAccessibility(target, coreContext, rulesContext);
              } else if (type === 'performance') {
                await this.optimizePerformance(target, coreContext, rulesContext);
              } else if (type === 'standardize') {
                await this.standardizeCode(target, coreContext, rulesContext);
              } else {
                // Refactorizaci√≥n general
                await this.refactorCode(target, type || 'general', coreContext, rulesContext);
              }
              
            } catch (error) {
              this.log(`‚ùå Error al procesar solicitud de refactorizaci√≥n: ${error}`, 'error');
            }
          });
          
          // Manejar sugerencias de revisi√≥n de c√≥digo
          this.on(AgentEventType.CODE_REVIEW_COMPLETED, async (data: any) => {
            try {
              this.log(`üì• Recibida revisi√≥n de c√≥digo: ${JSON.stringify(data)}`);
              
              const { target, suggestions, applySuggestions } = data;
              
              if (!target) {
                this.log('‚ùå Falta el objetivo de la revisi√≥n', 'error');
                return;
              }
              
              // Si se solicita aplicar sugerencias autom√°ticamente
              if (applySuggestions && suggestions && suggestions.length > 0) {
                await this.applySuggestions(target, suggestions);
              } else {
                this.log('‚ÑπÔ∏è Revisi√≥n recibida, pero no se solicit√≥ aplicar sugerencias autom√°ticamente');
              }
              
            } catch (error) {
              this.log(`‚ùå Error al procesar revisi√≥n de c√≥digo: ${error}`, 'error');
            }
          });
          
          // Manejar solicitudes de m√©tricas
          this.on(AgentEventType.METRICS_REQUESTED, async (data: any) => {
            try {
              this.log(`üì• Recibida solicitud de m√©tricas: ${JSON.stringify(data)}`);
              
              const { target } = data;
              
              if (!target) {
                this.log('‚ùå Falta el objetivo para calcular m√©tricas', 'error');
                return;
              }
              
              // Cargar contexto del proyecto
              const coreContext = await this.loadContext('core');
              const rulesContext = await this.loadContext('rules');
              
              // Calcular m√©tricas
              await this.calculateMetrics(target, coreContext, rulesContext);
              
            } catch (error) {
              this.log(`‚ùå Error al procesar solicitud de m√©tricas: ${error}`, 'error');
            }
          });
        }
        
        /**
         * Carga un archivo de contexto
         */
        private async loadContext(contextType: string): Promise<string> {
          try {
            const contextPath = path.join(this.contextPath, `${contextType}.md`);
            
            if (fs.existsSync(contextPath)) {
              return fs.readFileSync(contextPath, 'utf-8');
            } else {
              this.log(`‚ö†Ô∏è Archivo de contexto no encontrado: ${contextPath}`, 'warning');
              return `# ${contextType.charAt(0).toUpperCase() + contextType.slice(1)} Context\n\nNo hay informaci√≥n disponible.`;
            }
          } catch (error) {
            this.log(`‚ùå Error al cargar contexto ${contextType}: ${error}`, 'error');
            return `# ${contextType.charAt(0).toUpperCase() + contextType.slice(1)} Context\n\nError al cargar informaci√≥n.`;
          }
        }
        
        /**
         * Activa o desactiva el modo dry-run
         */
        public setDryRun(enabled: boolean): void {
          this.dryRun = enabled;
          this.log(`üîß Modo dry-run ${enabled ? 'activado' : 'desactivado'}`);
        }
        
        /**
         * Establece la ruta base del c√≥digo
         */
        public setCodebasePath(path: string): void {
          if (fs.existsSync(path)) {
            this.codebasePath = path;
            this.log(`üìÅ Ruta base del c√≥digo establecida: ${path}`);
          } else {
            this.log(`‚ùå Ruta no encontrada: ${path}`, 'error');
          }
        }
      }