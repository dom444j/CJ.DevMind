import { BaseAgent } from './base-agent';
import fs from 'fs';
import path from 'path';

/**
 * Frontend Sync Agent - Integraci√≥n frontend-backend
 * 
 * Este agente es responsable de:
 * 1. Conectar componentes frontend con APIs backend
 * 2. Implementar gesti√≥n de estado (Redux, Context API, etc.)
 * 3. Configurar fetching de datos y cach√©
 * 4. Manejar autenticaci√≥n y autorizaci√≥n en el frontend
 * 5. Generar hooks y utilidades para comunicaci√≥n con el backend
 */
export class FrontendSyncAgent extends BaseAgent {
  constructor() {
    super('Frontend Sync Agent');
  }
  
  /**
   * Ejecuta el Frontend Sync Agent para integrar frontend y backend
   * @param syncSpec Especificaci√≥n de la integraci√≥n
   */
  async run(syncSpec: string): Promise<void> {
    console.log(`üîÑ Frontend Sync Agent integrando frontend-backend para: "${syncSpec}"`);
    
    // Leer contexto relevante
    const coreContext = this.readContext('core.md');
    const frontendContext = this.readContext('frontend.md');
    const backendContext = this.readContext('backend.md');
    
    // Crear prompt para el LLM
    const syncPrompt = `
    # Contexto del Proyecto
    ${coreContext}
    
    # Contexto Frontend
    ${frontendContext}
    
    # Contexto Backend
    ${backendContext}
    
    # Tarea de Frontend Sync Agent
    Act√∫a como el Frontend Sync Agent de CJ.DevMind. Tu tarea es integrar el frontend con el backend basado en la siguiente especificaci√≥n:
    
    "${syncSpec}"
    
    Genera:
    1. Configuraci√≥n de cliente HTTP (Axios, Fetch API, etc.)
    2. Hooks personalizados para consumir APIs
    3. Gesti√≥n de estado (Redux, Context API, etc.)
    4. Manejo de autenticaci√≥n en el frontend
    5. Estrategias de cach√© y optimizaci√≥n de peticiones
    6. Manejo de errores y estados de carga
    
    La integraci√≥n debe ser coherente con la arquitectura del proyecto y seguir las mejores pr√°cticas.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(syncPrompt);
      
      // Analizar la respuesta para extraer c√≥digo y configuraciones
      const files = this.extractFilesFromResponse(response);
      
      // Guardar archivos generados
      for (const [filePath, content] of Object.entries(files)) {
        const fullPath = path.join(process.cwd(), filePath);
        const dirPath = path.dirname(fullPath);
        
        // Crear directorio si no existe
        if (!fs.existsSync(dirPath)) {
          fs.mkdirSync(dirPath, { recursive: true });
        }
        
        // Escribir archivo
        fs.writeFileSync(fullPath, content, 'utf-8');
        console.log(`‚úÖ Archivo generado: ${filePath}`);
      }
      
      // Generar grafo de conexiones
      console.log('üìä Generando grafo de conexiones entre frontend y backend...');
      
      console.log('‚úÖ Integraci√≥n frontend-backend completada con √©xito');
    } catch (error) {
      console.error('‚ùå Error al integrar frontend-backend:', error);
      throw error;
    }
  }
  
  /**
   * Extrae archivos y su contenido de la respuesta del LLM
   */
  private extractFilesFromResponse(response: string): Record<string, string> {
    const files: Record<string, string> = {};
    const fileRegex = /```(?:typescript|javascript|jsx|tsx)\s*(?:\/\/\s*)?([a-zA-Z0-9\/\-_.]+)\s*\n([\s\S]*?)```/g;
    
    let match;
    while ((match = fileRegex.exec(response)) !== null) {
      const [_, filePath, content] = match;
      files[filePath] = content.trim();
    }
    
    return files;
  }
}