import { BaseAgent } from './base-agent';
import { ArchitectAgent } from './architect-agent';
import { VisionAgent } from './vision-agent';
import { RefactorAgent } from './refactor-agent';
import { DocAgent } from './doc-agent';
import fs from 'fs';
import path from 'path';

/**
 * Orchestrator Agent - Coordina el trabajo entre todos los agentes
 * 
 * Este agente es responsable de:
 * 1. Descomponer proyectos complejos en tareas espec√≠ficas
 * 2. Asignar tareas a los agentes especializados
 * 3. Gestionar dependencias entre tareas
 * 4. Resolver conflictos entre agentes
 * 5. Mantener una visi√≥n global del progreso
 */
export class OrchestratorAgent extends BaseAgent {
  private agents: Map<string, BaseAgent>;
  private taskQueue: Array<{id: string, type: string, description: string, dependencies: string[], status: string}>;
  private projectPath: string;
  
  constructor() {
    super('Orchestrator Agent');
    
    // Inicializar agentes disponibles
    this.agents = new Map();
    this.agents.set('vision', new VisionAgent());
    this.agents.set('architect', new ArchitectAgent());
    this.agents.set('refactor', new RefactorAgent());
    this.agents.set('doc', new DocAgent());
    
    // Inicializar cola de tareas
    this.taskQueue = [];
    
    // Directorio del proyecto actual
    this.projectPath = process.cwd();
  }
  
  /**
   * Ejecuta el Orchestrator Agent para coordinar un proyecto completo
   * @param projectDescription Descripci√≥n del proyecto a coordinar
   */
  async run(projectDescription: string): Promise<void> {
    console.log(`üîÑ Orchestrator Agent iniciando coordinaci√≥n para: "${projectDescription}"`);
    
    // Leer contexto relevante
    const coreContext = this.readContext('core.md');
    const rulesContext = this.readContext('rules.md');
    const modulesContext = this.readContext('modules.md');
    
    // Crear plan de proyecto con LLM
    const planPrompt = `
    # Contexto del Proyecto
    ${coreContext}
    
    # Reglas Arquitect√≥nicas
    ${rulesContext}
    
    # M√≥dulos Disponibles
    ${modulesContext}
    
    # Tarea de Orchestrator Agent
    Act√∫a como el Orchestrator Agent de CJ.DevMind. Tu tarea es crear un plan detallado para el siguiente proyecto:
    
    "${projectDescription}"
    
    Proporciona:
    1. Desglose del proyecto en tareas espec√≠ficas
    2. Asignaci√≥n de cada tarea al agente m√°s adecuado (vision, architect, refactor, doc)
    3. Dependencias entre tareas (qu√© debe completarse antes)
    4. Timeline estimado para completar el proyecto
    5. Puntos de decisi√≥n que requieren intervenci√≥n humana
    
    Formatea tu respuesta como JSON con la siguiente estructura:
    {
      "projectName": "Nombre del proyecto",
      "description": "Descripci√≥n detallada",
      "tasks": [
        {
          "id": "task-1",
          "type": "vision|architect|refactor|doc",
          "description": "Descripci√≥n de la tarea",
          "dependencies": ["id-de-tarea-previa"],
          "estimatedTime": "2h"
        }
      ],
      "humanDecisionPoints": [
        {
          "afterTask": "task-id",
          "description": "Qu√© debe decidir el humano"
        }
      ]
    }
    `;
    
    // En modo real, consultar√≠amos al LLM
    let projectPlan;
    
    if (process.env.DEVMIND_REAL_MODE === 'true') {
      try {
        const result = await this.queryLLM(planPrompt);
        projectPlan = JSON.parse(result);
        
        // Guardar el plan en el directorio de contexto
        const planPath = path.join(this.contextPath, 'project-plan.json');
        fs.writeFileSync(planPath, JSON.stringify(projectPlan, null, 2), 'utf-8');
        console.log(`‚úÖ Plan de proyecto guardado en ${planPath}`);
      } catch (error) {
        console.error('‚ùå Error generando plan de proyecto:', error);
        return;
      }
    } else {
      // Modo simulado para desarrollo
      console.log('üß™ Ejecutando en modo simulado');
      
      // Plan simulado
      projectPlan = {
        projectName: `Proyecto: ${projectDescription.slice(0, 30)}...`,
        description: `Implementaci√≥n completa de ${projectDescription}`,
        tasks: [
          {
            id: "task-1",
            type: "vision",
            description: "Definir requisitos detallados del proyecto",
            dependencies: [],
            estimatedTime: "1h"
          },
          {
            id: "task-2",
            type: "architect",
            description: "Dise√±ar arquitectura global del sistema",
            dependencies: ["task-1"],
            estimatedTime: "2h"
          },
          {
            id: "task-3",
            type: "refactor",
            description: "Preparar estructura base de carpetas",
            dependencies: ["task-2"],
            estimatedTime: "1h"
          },
          {
            id: "task-4",
            type: "doc",
            description: "Documentar arquitectura inicial",
            dependencies: ["task-2", "task-3"],
            estimatedTime: "1h"
          }
        ],
        humanDecisionPoints: [
          {
            afterTask: "task-2",
            description: "Revisar y aprobar la arquitectura propuesta"
          }
        ]
      };
      
      // Guardar el plan simulado
      const planPath = path.join(this.contextPath, 'project-plan.json');
      fs.writeFileSync(planPath, JSON.stringify(projectPlan, null, 2), 'utf-8');
      console.log(`‚úÖ Plan de proyecto simulado guardado en ${planPath}`);
    }
    
    // Cargar tareas en la cola
    this.taskQueue = projectPlan.tasks.map(task => ({
      ...task,
      status: 'pending'
    }));
    
    // Mostrar plan de proyecto
    console.log('\nüìã Plan de Proyecto:\n');
    console.log(`Nombre: ${projectPlan.projectName}`);
    console.log(`Descripci√≥n: ${projectPlan.description}`);
    console.log('\nTareas:');
    projectPlan.tasks.forEach(task => {
      console.log(`- [${task.type}] ${task.description} (${task.estimatedTime})`);
      if (task.dependencies.length > 0) {
        console.log(`  Dependencias: ${task.dependencies.join(', ')}`);
      }
    });
    
    console.log('\nPuntos de Decisi√≥n Humana:');
    projectPlan.humanDecisionPoints.forEach(point => {
      console.log(`- Despu√©s de: ${point.afterTask}`);
      console.log(`  ${point.description}`);
    });
    
    // Preguntar si se desea ejecutar el plan
    console.log('\n‚ö†Ô∏è Este es un plan simulado. En una implementaci√≥n completa, se ejecutar√≠an las tareas autom√°ticamente.');
    console.log('Para ejecutar manualmente, usa los comandos espec√≠ficos de cada agente:');
    console.log('- cj vision "descripci√≥n"');
    console.log('- cj architect "descripci√≥n"');
    console.log('- cj refactor "tarea"');
    console.log('- cj doc "ruta/al/m√≥dulo"');
  }
  
  /**
   * Ejecuta la siguiente tarea disponible en la cola
   * @returns Resultado de la tarea
   */
  private async executeNextTask(): Promise<boolean> {
    // Encontrar tareas sin dependencias pendientes
    const availableTasks = this.taskQueue.filter(task => {
      if (task.status !== 'pending') return false;
      
      // Verificar que todas las dependencias est√©n completadas
      return task.dependencies.every(depId => {
        const depTask = this.taskQueue.find(t => t.id === depId);
        return depTask && depTask.status === 'completed';
      });
    });
    
    if (availableTasks.length === 0) {
      console.log('‚úÖ No hay m√°s tareas disponibles para ejecutar');
      return false;
    }
    
    // Tomar la primera tarea disponible
    const task = availableTasks[0];
    console.log(`üîÑ Ejecutando tarea: ${task.description} [${task.type}]`);
    
    // Marcar como en progreso
    task.status = 'in-progress';
    
    try {
      // Obtener el agente correspondiente
      const agent = this.agents.get(task.type);
      
      if (!agent) {
        throw new Error(`Agente no encontrado para el tipo: ${task.type}`);
      }
      
      // Ejecutar la tarea con el agente
      await agent.run(task.description);
      
      // Marcar como completada
      task.status = 'completed';
      console.log(`‚úÖ Tarea completada: ${task.description}`);
      
      return true;
    } catch (error) {
      // Marcar como fallida
      task.status = 'failed';
      console.error(`‚ùå Error en tarea ${task.id}:`, error);
      return false;
    }
  }
}

// Funci√≥n auxiliar para mantener compatibilidad con c√≥digo existente
export async function orchestratorAgent(projectDescription: string): Promise<string> {
  const agent = new OrchestratorAgent();
  await agent.run(projectDescription);
  return "Ejecutado con √©xito";
}