import { BaseAgent } from './base-agent';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';

/**
 * Logic Agent - Implementa algoritmos y reglas de negocio complejas
 * 
 * Este agente es responsable de:
 * 1. Analizar requisitos de l√≥gica de negocio
 * 2. Dise√±ar e implementar algoritmos optimizados
 * 3. Crear diagramas de flujo y √°rboles de decisi√≥n
 * 4. Generar pruebas unitarias para la l√≥gica implementada
 * 5. Documentar la l√≥gica de negocio con ejemplos
 */
export class LogicAgent extends BaseAgent {
  constructor() {
    super('Logic Agent');
  }

  /**
   * Ejecuta el agente de l√≥gica de negocio
   * @param spec Especificaci√≥n de la l√≥gica a implementar
   */
  async run(spec: string): Promise<void> {
    console.log('üßÆ Iniciando Logic Agent...');
    console.log('üìã Especificaci√≥n recibida:', spec);

    try {
      // Determinar el tipo de operaci√≥n
      if (spec.startsWith('algorithm:')) {
        const algorithmSpec = spec.substring(10).trim();
        await this.implementAlgorithm(algorithmSpec);
      } else if (spec.startsWith('business-rule:')) {
        const ruleSpec = spec.substring(14).trim();
        await this.implementBusinessRule(ruleSpec);
      } else if (spec.startsWith('flow:')) {
        const flowSpec = spec.substring(5).trim();
        await this.createFlowDiagram(flowSpec);
      } else if (spec.startsWith('optimize:')) {
        const optimizeSpec = spec.substring(9).trim();
        await this.optimizeAlgorithm(optimizeSpec);
      } else {
        // Operaci√≥n por defecto: an√°lisis e implementaci√≥n completa
        await this.implementLogic(spec);
      }
      
      console.log('‚úÖ L√≥gica de negocio implementada con √©xito');
    } catch (error) {
      console.error('‚ùå Error al implementar la l√≥gica de negocio:', error);
      throw error;
    }
  }
  
  /**
   * Implementa un algoritmo espec√≠fico
   * @param spec Especificaci√≥n del algoritmo
   */
  private async implementAlgorithm(spec: string): Promise<void> {
    console.log(`üß† Implementando algoritmo: "${spec}"`);
    
    // Crear directorio para algoritmos si no existe
    const algorithmsDir = path.join(process.cwd(), 'src', 'algorithms');
    if (!fs.existsSync(algorithmsDir)) {
      fs.mkdirSync(algorithmsDir, { recursive: true });
    }
    
    // Crear prompt para el LLM
    const algorithmPrompt = `
    # Tarea de Logic Agent
    
    Implementa un algoritmo optimizado para la siguiente especificaci√≥n:
    
    "${spec}"
    
    Proporciona:
    1. An√°lisis de complejidad (tiempo y espacio)
    2. Implementaci√≥n en TypeScript
    3. Explicaci√≥n detallada del funcionamiento
    4. Casos de prueba
    
    El algoritmo debe ser eficiente, legible y bien documentado.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(algorithmPrompt);
      
      // Extraer el c√≥digo TypeScript de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo del algoritmo de la respuesta del LLM');
      }
      
      const algorithmCode = tsMatch[1];
      
      // Generar nombre de archivo basado en la especificaci√≥n
      const fileName = `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.ts`;
      const filePath = path.join(algorithmsDir, fileName);
      
      // Guardar el algoritmo
      fs.writeFileSync(filePath, algorithmCode, 'utf-8');
      
      // Extraer la explicaci√≥n y an√°lisis
      const explanation = response.replace(/```[\s\S]*?```/g, '').trim();
      
      // Guardar la explicaci√≥n
      const docPath = path.join(algorithmsDir, `${path.basename(fileName, '.ts')}.md`);
      fs.writeFileSync(docPath, explanation, 'utf-8');
      
      // Generar pruebas unitarias
      await this.generateTests(spec, algorithmCode, fileName);
      
      console.log(`‚úÖ Algoritmo implementado: ${filePath}`);
      console.log(`üìù Documentaci√≥n guardada: ${docPath}`);
    } catch (error) {
      console.error('‚ùå Error al implementar algoritmo:', error);
      throw error;
    }
  }
  
  /**
   * Implementa una regla de negocio
   * @param spec Especificaci√≥n de la regla de negocio
   */
  private async implementBusinessRule(spec: string): Promise<void> {
    console.log(`üìè Implementando regla de negocio: "${spec}"`);
    
    // Crear directorio para reglas de negocio si no existe
    const rulesDir = path.join(process.cwd(), 'src', 'business-rules');
    if (!fs.existsSync(rulesDir)) {
      fs.mkdirSync(rulesDir, { recursive: true });
    }
    
    // Crear prompt para el LLM
    const rulePrompt = `
    # Tarea de Logic Agent
    
    Implementa una regla de negocio para la siguiente especificaci√≥n:
    
    "${spec}"
    
    Proporciona:
    1. An√°lisis de la regla y sus implicaciones
    2. Implementaci√≥n en TypeScript (clase o funci√≥n)
    3. Validaciones y manejo de excepciones
    4. Ejemplos de uso
    
    La regla debe ser robusta, mantenible y bien documentada.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(rulePrompt);
      
      // Extraer el c√≥digo TypeScript de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo de la regla de negocio de la respuesta del LLM');
      }
      
      const ruleCode = tsMatch[1];
      
      // Generar nombre de archivo basado en la especificaci√≥n
      const fileName = `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.ts`;
      const filePath = path.join(rulesDir, fileName);
      
      // Guardar la regla de negocio
      fs.writeFileSync(filePath, ruleCode, 'utf-8');
      
      // Extraer la explicaci√≥n y an√°lisis
      const explanation = response.replace(/```[\s\S]*?```/g, '').trim();
      
      // Guardar la explicaci√≥n
      const docPath = path.join(rulesDir, `${path.basename(fileName, '.ts')}.md`);
      fs.writeFileSync(docPath, explanation, 'utf-8');
      
      // Generar pruebas unitarias
      await this.generateTests(spec, ruleCode, fileName, 'business-rules');
      
      // Generar diagrama de flujo para la regla
      await this.createFlowDiagram(spec, 'rule');
      
      console.log(`‚úÖ Regla de negocio implementada: ${filePath}`);
      console.log(`üìù Documentaci√≥n guardada: ${docPath}`);
    } catch (error) {
      console.error('‚ùå Error al implementar regla de negocio:', error);
      throw error;
    }
  }
  
  /**
   * Crea un diagrama de flujo
   * @param spec Especificaci√≥n del flujo
   * @param type Tipo de diagrama (flow, rule, decision-tree)
   */
  private async createFlowDiagram(spec: string, type: string = 'flow'): Promise<void> {
    console.log(`üìä Creando diagrama de flujo para: "${spec}"`);
    
    // Crear directorio para diagramas si no existe
    const diagramsDir = path.join(process.cwd(), 'diagrams');
    if (!fs.existsSync(diagramsDir)) {
      fs.mkdirSync(diagramsDir, { recursive: true });
    }
    
    // Crear prompt para el LLM
    const diagramPrompt = `
    # Tarea de Logic Agent
    
    Crea un diagrama de flujo en formato Mermaid para la siguiente especificaci√≥n:
    
    "${spec}"
    
    El diagrama debe representar ${type === 'rule' ? 'la regla de negocio' : type === 'decision-tree' ? 'el √°rbol de decisi√≥n' : 'el flujo l√≥gico'}.
    
    Utiliza la sintaxis de Mermaid para diagramas de flujo.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(diagramPrompt);
      
      // Extraer el c√≥digo Mermaid de la respuesta
      const mermaidMatch = response.match(/```(?:mermaid)\n([\s\S]*?)\n```/) || 
                          response.match(/```\n([\s\S]*?)\n```/) ||
                          response.match(/graph [A-Z][A-Z][\s\S]*?;/);
      
      if (!mermaidMatch) {
        throw new Error('No se pudo extraer el diagrama Mermaid de la respuesta del LLM');
      }
      
      const mermaidCode = mermaidMatch[1] || mermaidMatch[0];
      
      // Generar nombre de archivo basado en la especificaci√≥n
      const fileName = `${type}-${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.md`;
      const filePath = path.join(diagramsDir, fileName);
      
      // Guardar el diagrama Mermaid
      const fileContent = `# Diagrama: ${spec}\n\n\`\`\`mermaid\n${mermaidCode}\n\`\`\`\n`;
      fs.writeFileSync(filePath, fileContent, 'utf-8');
      
      // Generar SVG si es posible
      try {
        const svgFileName = `${type}-${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.svg`;
        const svgFilePath = path.join(diagramsDir, svgFileName);
        
        // Aqu√≠ se podr√≠a usar una librer√≠a para convertir Mermaid a SVG
        // Por ahora, solo guardamos el c√≥digo Mermaid
        
        console.log(`‚úÖ Diagrama creado: ${filePath}`);
      } catch (svgError) {
        console.warn('‚ö†Ô∏è No se pudo generar el SVG del diagrama:', svgError);
        console.log(`‚úÖ Diagrama Mermaid guardado: ${filePath}`);
      }
    } catch (error) {
      console.error('‚ùå Error al crear diagrama de flujo:', error);
      throw error;
    }
  }
  
  /**
   * Optimiza un algoritmo existente
   * @param spec Especificaci√≥n del algoritmo a optimizar
   */
  private async optimizeAlgorithm(spec: string): Promise<void> {
    console.log(`‚ö° Optimizando algoritmo: "${spec}"`);
    
    // Verificar si se proporciona una ruta de archivo
    let sourceCode = '';
    let filePath = '';
    
    if (fs.existsSync(spec)) {
      // Es una ruta de archivo
      filePath = spec;
      sourceCode = fs.readFileSync(spec, 'utf-8');
    } else {
      // Buscar el archivo por nombre en el directorio de algoritmos
      const algorithmsDir = path.join(process.cwd(), 'src', 'algorithms');
      if (fs.existsSync(algorithmsDir)) {
        const files = fs.readdirSync(algorithmsDir);
        const matchingFile = files.find(file => 
          file.toLowerCase().includes(spec.toLowerCase().replace(/\s+/g, '-'))
        );
        
        if (matchingFile) {
          filePath = path.join(algorithmsDir, matchingFile);
          sourceCode = fs.readFileSync(filePath, 'utf-8');
        }
      }
    }
    
    if (!sourceCode) {
      throw new Error(`No se encontr√≥ el algoritmo para optimizar: ${spec}`);
    }
    
    // Crear prompt para el LLM
    const optimizePrompt = `
    # Tarea de Logic Agent
    
    Optimiza el siguiente algoritmo:
    
    \`\`\`typescript
    ${sourceCode}
    \`\`\`
    
    Proporciona:
    1. An√°lisis de la complejidad actual
    2. Optimizaciones aplicadas
    3. Versi√≥n optimizada del c√≥digo
    4. Nuevo an√°lisis de complejidad
    
    Mant√©n la misma interfaz p√∫blica para no romper compatibilidad.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(optimizePrompt);
      
      // Extraer el c√≥digo optimizado de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo optimizado de la respuesta del LLM');
      }
      
      const optimizedCode = tsMatch[1];
      
      // Crear copia de seguridad del archivo original
      const backupPath = `${filePath}.bak`;
      fs.copyFileSync(filePath, backupPath);
      
      // Guardar el c√≥digo optimizado
      fs.writeFileSync(filePath, optimizedCode, 'utf-8');
      
      // Extraer la explicaci√≥n y an√°lisis
      const explanation = response.replace(/```[\s\S]*?```/g, '').trim();
      
      // Guardar la explicaci√≥n
      const docPath = path.join(path.dirname(filePath), `${path.basename(filePath, '.ts')}-optimization.md`);
      fs.writeFileSync(docPath, explanation, 'utf-8');
      
      console.log(`‚úÖ Algoritmo optimizado: ${filePath}`);
      console.log(`üìù An√°lisis de optimizaci√≥n guardado: ${docPath}`);
      console.log(`üîÑ Copia de seguridad creada: ${backupPath}`);
    } catch (error) {
      console.error('‚ùå Error al optimizar algoritmo:', error);
      throw error;
    }
  }
  
  /**
   * Implementa l√≥gica de negocio completa
   * @param spec Especificaci√≥n de la l√≥gica
   */
  private async implementLogic(spec: string): Promise<void> {
    console.log(`üßÆ Implementando l√≥gica de negocio completa: "${spec}"`);
    
    try {
      // Analizar la especificaci√≥n
      console.log('üîç Analizando especificaci√≥n de l√≥gica de negocio...');
      
      // Crear prompt para el LLM
      const analysisPrompt = `
      # Tarea de Logic Agent
      
      Analiza la siguiente especificaci√≥n de l√≥gica de negocio:
      
      "${spec}"
      
      Proporciona:
      1. Descomposici√≥n en componentes l√≥gicos
      2. Algoritmos necesarios
      3. Reglas de negocio identificadas
      4. Flujos de decisi√≥n requeridos
      
      Estructura tu respuesta en formato JSON.
      `;
      
      // Consultar al LLM
      const analysisResponse = await this.queryLLM(analysisPrompt);
      
      // Extraer el JSON de la respuesta
      const jsonMatch = analysisResponse.match(/```(?:json)\n([\s\S]*?)\n```/) || 
                       analysisResponse.match(/```\n([\s\S]*?)\n```/) ||
                       analysisResponse.match(/{[\s\S]*?}/);
      
      if (!jsonMatch) {
        throw new Error('No se pudo extraer el an√°lisis de la respuesta del LLM');
      }
      
      const analysis = JSON.parse(jsonMatch[1] || jsonMatch[0]);
      
      // Crear directorio para la l√≥gica de negocio
      const logicName = spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
      const logicDir = path.join(process.cwd(), 'src', 'logic', logicName);
      if (!fs.existsSync(logicDir)) {
        fs.mkdirSync(logicDir, { recursive: true });
      }
      
      // Guardar el an√°lisis
      const analysisPath = path.join(logicDir, 'analysis.json');
      fs.writeFileSync(analysisPath, JSON.stringify(analysis, null, 2), 'utf-8');
      
      // Implementar cada componente l√≥gico
      if (analysis.algorithms) {
        for (const algorithm of analysis.algorithms) {
          await this.implementAlgorithm(`${algorithm.name}: ${algorithm.description}`);
        }
      }
      
      if (analysis.businessRules) {
        for (const rule of analysis.businessRules) {
          await this.implementBusinessRule(`${rule.name}: ${rule.description}`);
        }
      }
      
      if (analysis.decisionFlows) {
        for (const flow of analysis.decisionFlows) {
          await this.createFlowDiagram(`${flow.name}: ${flow.description}`, 'decision-tree');
        }
      }
      
      // Generar m√≥dulo principal que integre todos los componentes
      await this.generateMainModule(spec, analysis, logicDir);
      
            // Generar pruebas de integraci√≥n
      await this.generateIntegrationTests(spec, analysis, logicDir);
      
      console.log(`‚úÖ L√≥gica de negocio completa implementada: ${logicDir}`);
    } catch (error) {
      console.error('‚ùå Error al implementar l√≥gica de negocio:', error);
      throw error;
    }
  }
  
  /**
   * Genera pruebas unitarias para un algoritmo o regla de negocio
   * @param spec Especificaci√≥n del algoritmo o regla
   * @param code C√≥digo implementado
   * @param fileName Nombre del archivo
   * @param type Tipo de prueba (algorithms, business-rules)
   */
  private async generateTests(spec: string, code: string, fileName: string, type: string = 'algorithms'): Promise<void> {
    console.log(`üß™ Generando pruebas unitarias para: "${spec}"`);
    
    // Crear directorio para pruebas si no existe
    const testsDir = path.join(process.cwd(), 'tests', type);
    if (!fs.existsSync(testsDir)) {
      fs.mkdirSync(testsDir, { recursive: true });
    }
    
    // Crear prompt para el LLM
    const testPrompt = `
    # Tarea de Logic Agent
    
    Genera pruebas unitarias para el siguiente c√≥digo ${type === 'algorithms' ? 'algoritmo' : 'regla de negocio'}:
    
    \`\`\`typescript
    ${code}
    \`\`\`
    
    Especificaci√≥n: "${spec}"
    
    Proporciona:
    1. Pruebas unitarias completas usando Jest
    2. Casos de prueba que cubran casos normales, l√≠mite y de error
    3. Mocks y stubs si son necesarios
    4. Comentarios explicativos
    
    Las pruebas deben ser exhaustivas y verificar correctamente la funcionalidad.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(testPrompt);
      
      // Extraer el c√≥digo de pruebas de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts|jest|js)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo de pruebas de la respuesta del LLM');
      }
      
      const testCode = tsMatch[1];
      
      // Generar nombre de archivo de prueba
      const testFileName = `${path.basename(fileName, '.ts')}.test.ts`;
      const testFilePath = path.join(testsDir, testFileName);
      
      // Guardar las pruebas
      fs.writeFileSync(testFilePath, testCode, 'utf-8');
      
      console.log(`‚úÖ Pruebas unitarias generadas: ${testFilePath}`);
    } catch (error) {
      console.error('‚ùå Error al generar pruebas unitarias:', error);
      throw error;
    }
  }
  
  /**
   * Genera pruebas de integraci√≥n para la l√≥gica de negocio
   * @param spec Especificaci√≥n de la l√≥gica
   * @param analysis An√°lisis de la l√≥gica
   * @param logicDir Directorio de la l√≥gica
   */
  private async generateIntegrationTests(spec: string, analysis: any, logicDir: string): Promise<void> {
    console.log(`üß™ Generando pruebas de integraci√≥n para: "${spec}"`);
    
    // Crear directorio para pruebas de integraci√≥n si no existe
    const integrationTestsDir = path.join(process.cwd(), 'tests', 'integration');
    if (!fs.existsSync(integrationTestsDir)) {
      fs.mkdirSync(integrationTestsDir, { recursive: true });
    }
    
    // Crear prompt para el LLM
    const integrationTestPrompt = `
    # Tarea de Logic Agent
    
    Genera pruebas de integraci√≥n para la siguiente l√≥gica de negocio:
    
    Especificaci√≥n: "${spec}"
    
    An√°lisis: ${JSON.stringify(analysis, null, 2)}
    
    Proporciona:
    1. Pruebas de integraci√≥n usando Jest
    2. Escenarios que verifiquen la interacci√≥n entre componentes
    3. Configuraci√≥n de entorno de prueba
    4. Mocks para dependencias externas
    
    Las pruebas deben verificar que todos los componentes funcionen correctamente juntos.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(integrationTestPrompt);
      
      // Extraer el c√≥digo de pruebas de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts|jest|js)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo de pruebas de integraci√≥n de la respuesta del LLM');
      }
      
      const testCode = tsMatch[1];
      
      // Generar nombre de archivo de prueba
      const logicName = spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
      const testFileName = `${logicName}.integration.test.ts`;
      const testFilePath = path.join(integrationTestsDir, testFileName);
      
      // Guardar las pruebas
      fs.writeFileSync(testFilePath, testCode, 'utf-8');
      
      console.log(`‚úÖ Pruebas de integraci√≥n generadas: ${testFilePath}`);
    } catch (error) {
      console.error('‚ùå Error al generar pruebas de integraci√≥n:', error);
      throw error;
    }
  }
  
  /**
   * Genera el m√≥dulo principal que integra todos los componentes
   * @param spec Especificaci√≥n de la l√≥gica
   * @param analysis An√°lisis de la l√≥gica
   * @param logicDir Directorio de la l√≥gica
   */
  private async generateMainModule(spec: string, analysis: any, logicDir: string): Promise<void> {
    console.log(`üì¶ Generando m√≥dulo principal para: "${spec}"`);
    
    // Crear prompt para el LLM
    const mainModulePrompt = `
    # Tarea de Logic Agent
    
    Genera un m√≥dulo principal que integre todos los componentes para la siguiente l√≥gica de negocio:
    
    Especificaci√≥n: "${spec}"
    
    An√°lisis: ${JSON.stringify(analysis, null, 2)}
    
    Proporciona:
    1. Clase o m√≥dulo principal en TypeScript
    2. Importaciones de todos los componentes necesarios
    3. M√©todos p√∫blicos para interactuar con la l√≥gica
    4. Documentaci√≥n completa con JSDoc
    
    El m√≥dulo debe ser f√°cil de usar y ocultar la complejidad interna.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(mainModulePrompt);
      
      // Extraer el c√≥digo del m√≥dulo principal de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo del m√≥dulo principal de la respuesta del LLM');
      }
      
      const moduleCode = tsMatch[1];
      
      // Generar nombre de archivo
      const fileName = 'index.ts';
      const filePath = path.join(logicDir, fileName);
      
      // Guardar el m√≥dulo principal
      fs.writeFileSync(filePath, moduleCode, 'utf-8');
      
      // Extraer la documentaci√≥n
      const documentation = response.replace(/```[\s\S]*?```/g, '').trim();
      
      // Guardar la documentaci√≥n
      const docPath = path.join(logicDir, 'README.md');
      fs.writeFileSync(docPath, documentation, 'utf-8');
      
      console.log(`‚úÖ M√≥dulo principal generado: ${filePath}`);
      console.log(`üìù Documentaci√≥n guardada: ${docPath}`);
    } catch (error) {
      console.error('‚ùå Error al generar m√≥dulo principal:', error);
      throw error;
    }
  }
  
  /**
   * Genera un archivo .env.example con las variables de entorno necesarias
   * @param logicDir Directorio de la l√≥gica
   */
  private generateEnvExample(logicDir: string): void {
    console.log('üìÑ Generando archivo .env.example');
    
    const envExample = `# Variables de entorno para la l√≥gica de negocio
# Copie este archivo a .env y ajuste los valores seg√∫n sea necesario

# Configuraci√≥n general
NODE_ENV=development
LOG_LEVEL=info

# Configuraci√≥n de servicios externos (si aplica)
# API_KEY=your_api_key_here
# API_URL=https://api.example.com

# Configuraci√≥n de base de datos (si aplica)
# DB_HOST=localhost
# DB_PORT=5432
# DB_USER=postgres
# DB_PASSWORD=password
# DB_NAME=logic_db

# Configuraci√≥n de cach√© (si aplica)
# CACHE_TTL=3600
# REDIS_URL=redis://localhost:6379

# Configuraci√≥n de rendimiento
# MAX_CONCURRENT_OPERATIONS=10
# TIMEOUT_MS=5000
`;
    
    const envPath = path.join(logicDir, '.env.example');
    fs.writeFileSync(envPath, envExample, 'utf-8');
    
    console.log(`‚úÖ Archivo .env.example generado: ${envPath}`);
  }
  
  /**
   * Genera un archivo de configuraci√≥n para la l√≥gica de negocio
   * @param spec Especificaci√≥n de la l√≥gica
   * @param logicDir Directorio de la l√≥gica
   */
  private generateConfig(spec: string, logicDir: string): void {
    console.log('‚öôÔ∏è Generando archivo de configuraci√≥n');
    
    const configCode = `/**
 * Configuraci√≥n para la l√≥gica de negocio: ${spec}
 */
import dotenv from 'dotenv';

// Cargar variables de entorno
dotenv.config();

export interface LogicConfig {
  environment: string;
  logLevel: string;
  performance: {
    maxConcurrentOperations: number;
    timeoutMs: number;
  };
  // A√±adir otras configuraciones espec√≠ficas seg√∫n sea necesario
}

const config: LogicConfig = {
  environment: process.env.NODE_ENV || 'development',
  logLevel: process.env.LOG_LEVEL || 'info',
  performance: {
    maxConcurrentOperations: parseInt(process.env.MAX_CONCURRENT_OPERATIONS || '10', 10),
    timeoutMs: parseInt(process.env.TIMEOUT_MS || '5000', 10),
  },
  // A√±adir otras configuraciones espec√≠ficas seg√∫n sea necesario
};

export default config;
`;
    
    const configPath = path.join(logicDir, 'config.ts');
    fs.writeFileSync(configPath, configCode, 'utf-8');
    
    console.log(`‚úÖ Archivo de configuraci√≥n generado: ${configPath}`);
  }
  
  /**
   * Genera un archivo de utilidades para la l√≥gica de negocio
   * @param logicDir Directorio de la l√≥gica
   */
  private generateUtils(logicDir: string): void {
    console.log('üîß Generando archivo de utilidades');
    
    const utilsCode = `/**
 * Utilidades para la l√≥gica de negocio
 */

/**
 * Registra un mensaje en el log
 * @param message Mensaje a registrar
 * @param level Nivel de log (info, warn, error)
 */
export function log(message: string, level: 'info' | 'warn' | 'error' = 'info'): void {
  const timestamp = new Date().toISOString();
  const formattedMessage = \`[\${timestamp}] [\${level.toUpperCase()}] \${message}\`;
  
  switch (level) {
    case 'warn':
      console.warn(formattedMessage);
      break;
    case 'error':
      console.error(formattedMessage);
      break;
    default:
      console.log(formattedMessage);
  }
}

/**
 * Mide el tiempo de ejecuci√≥n de una funci√≥n
 * @param fn Funci√≥n a medir
 * @param args Argumentos para la funci√≥n
 * @returns Resultado de la funci√≥n y tiempo de ejecuci√≥n en ms
 */
export async function measureExecutionTime<T, Args extends any[]>(
  fn: (...args: Args) => Promise<T> | T,
  ...args: Args
): Promise<{ result: T; executionTime: number }> {
  const startTime = performance.now();
  const result = await fn(...args);
  const endTime = performance.now();
  const executionTime = endTime - startTime;
  
  return { result, executionTime };
}

/**
 * Reintenta una operaci√≥n un n√∫mero espec√≠fico de veces
 * @param operation Operaci√≥n a reintentar
 * @param maxRetries N√∫mero m√°ximo de reintentos
 * @param delayMs Retraso entre reintentos en ms
 * @returns Resultado de la operaci√≥n
 */
export async function retry<T>(
  operation: () => Promise<T>,
  maxRetries: number = 3,
  delayMs: number = 1000
): Promise<T> {
  let lastError: Error | null = null;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      return await operation();
    } catch (error) {
      lastError = error as Error;
      log(\`Intento \${attempt} fallido: \${error.message}\`, 'warn');
      
      if (attempt < maxRetries) {
        log(\`Reintentando en \${delayMs}ms...\`, 'info');
        await new Promise(resolve => setTimeout(resolve, delayMs));
      }
    }
  }
  
  throw new Error(\`Operaci√≥n fallida despu√©s de \${maxRetries} intentos: \${lastError?.message}\`);
}

/**
 * Valida que un valor no sea nulo o indefinido
 * @param value Valor a validar
 * @param name Nombre del valor para el mensaje de error
 * @returns El valor validado
 */
export function validateNotNull<T>(value: T | null | undefined, name: string): T {
  if (value === null || value === undefined) {
    throw new Error(\`\${name} no puede ser nulo o indefinido\`);
  }
  return value;
}

/**
 * Formatea un n√∫mero con separadores de miles
 * @param num N√∫mero a formatear
 * @returns N√∫mero formateado
 */
export function formatNumber(num: number): string {
  return num.toLocaleString('es-ES');
}

/**
 * Genera un ID √∫nico
 * @returns ID √∫nico
 */
export function generateId(): string {
  return \`\${Date.now()}-\${Math.random().toString(36).substr(2, 9)}\`;
}
`;
    
    const utilsPath = path.join(logicDir, 'utils.ts');
    fs.writeFileSync(utilsPath, utilsCode, 'utf-8');
    
    console.log(`‚úÖ Archivo de utilidades generado: ${utilsPath}`);
  }
  
  /**
   * Genera un archivo de tipos para la l√≥gica de negocio
   * @param spec Especificaci√≥n de la l√≥gica
   * @param analysis An√°lisis de la l√≥gica
   * @param logicDir Directorio de la l√≥gica
   */
  private async generateTypes(spec: string, analysis: any, logicDir: string): Promise<void> {
    console.log('üìù Generando archivo de tipos');
    
    // Crear prompt para el LLM
    const typesPrompt = `
    # Tarea de Logic Agent
    
    Genera un archivo de tipos TypeScript para la siguiente l√≥gica de negocio:
    
    Especificaci√≥n: "${spec}"
    
    An√°lisis: ${JSON.stringify(analysis, null, 2)}
    
    Proporciona:
    1. Interfaces y tipos para todos los componentes
    2. Enumeraciones para valores fijos
    3. Tipos de utilidad si son necesarios
    4. Documentaci√≥n completa con JSDoc
    
    Los tipos deben ser claros, precisos y bien documentados.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(typesPrompt);
      
      // Extraer el c√≥digo de tipos de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo de tipos de la respuesta del LLM');
      }
      
      const typesCode = tsMatch[1];
      
      // Guardar el archivo de tipos
      const typesPath = path.join(logicDir, 'types.ts');
      fs.writeFileSync(typesPath, typesCode, 'utf-8');
      
      console.log(`‚úÖ Archivo de tipos generado: ${typesPath}`);
    } catch (error) {
      console.error('‚ùå Error al generar archivo de tipos:', error);
      throw error;
    }
  }
  
  /**
   * Genera un archivo de constantes para la l√≥gica de negocio
   * @param spec Especificaci√≥n de la l√≥gica
   * @param analysis An√°lisis de la l√≥gica
   * @param logicDir Directorio de la l√≥gica
   */
  private async generateConstants(spec: string, analysis: any, logicDir: string): Promise<void> {
    console.log('üìã Generando archivo de constantes');
    
    // Crear prompt para el LLM
    const constantsPrompt = `
    # Tarea de Logic Agent
    
    Genera un archivo de constantes para la siguiente l√≥gica de negocio:
    
    Especificaci√≥n: "${spec}"
    
    An√°lisis: ${JSON.stringify(analysis, null, 2)}
    
    Proporciona:
    1. Constantes para valores fijos
    2. Mensajes de error
    3. Configuraciones por defecto
    4. Documentaci√≥n con comentarios
    
    Las constantes deben ser organizadas por categor√≠as y bien documentadas.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(constantsPrompt);
      
      // Extraer el c√≥digo de constantes de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo de constantes de la respuesta del LLM');
      }
      
      const constantsCode = tsMatch[1];
      
      // Guardar el archivo de constantes
      const constantsPath = path.join(logicDir, 'constants.ts');
      fs.writeFileSync(constantsPath, constantsCode, 'utf-8');
      
      console.log(`‚úÖ Archivo de constantes generado: ${constantsPath}`);
    } catch (error) {
      console.error('‚ùå Error al generar archivo de constantes:', error);
      throw error;
    }
  }
  
  /**
   * Genera un archivo de validaciones para la l√≥gica de negocio
   * @param spec Especificaci√≥n de la l√≥gica
   * @param analysis An√°lisis de la l√≥gica
   * @param logicDir Directorio de la l√≥gica
   */
  private async generateValidations(spec: string, analysis: any, logicDir: string): Promise<void> {
    console.log('‚úÖ Generando archivo de validaciones');
    
    // Crear prompt para el LLM
    const validationsPrompt = `
    # Tarea de Logic Agent
    
    Genera un archivo de validaciones para la siguiente l√≥gica de negocio:
    
    Especificaci√≥n: "${spec}"
    
    An√°lisis: ${JSON.stringify(analysis, null, 2)}
    
    Proporciona:
    1. Funciones de validaci√≥n para entradas
    2. Validadores de reglas de negocio
    3. Manejo de errores personalizado
    4. Documentaci√≥n con JSDoc
    
    Las validaciones deben ser robustas y cubrir todos los casos posibles.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(validationsPrompt);
      
      // Extraer el c√≥digo de validaciones de la respuesta
      const tsMatch = response.match(/```(?:typescript|ts)\n([\s\S]*?)\n```/);
      
      if (!tsMatch) {
        throw new Error('No se pudo extraer el c√≥digo de validaciones de la respuesta del LLM');
      }
      
      const validationsCode = tsMatch[1];
      
      // Guardar el archivo de validaciones
      const validationsPath = path.join(logicDir, 'validations.ts');
      fs.writeFileSync(validationsPath, validationsCode, 'utf-8');
      
      console.log(`‚úÖ Archivo de validaciones generado: ${validationsPath}`);
    } catch (error) {
      console.error('‚ùå Error al generar archivo de validaciones:', error);
      throw error;
    }
  }
  
  /**
   * Consulta al LLM para obtener una respuesta
   * @param prompt Prompt para el LLM
   * @returns Respuesta del LLM
   */
  private async queryLLM(prompt: string): Promise<string> {
    // Aqu√≠ se implementar√≠a la l√≥gica para consultar al LLM
    // Por ahora, simulamos una respuesta
    
    return new Promise((resolve) => {
      setTimeout(() => {
        // Simulaci√≥n de respuesta del LLM
        resolve(`Respuesta simulada para el prompt: "${prompt.substring(0, 50)}..."`);
      }, 1000);
    });
  }
}