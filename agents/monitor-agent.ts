import { BaseAgent } from './base-agent';
import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';

/**
 * Monitor Agent - Configura la supervisi√≥n del sistema en producci√≥n
 * 
 * Este agente es responsable de:
 * 1. Configurar sistemas de monitoreo (Prometheus, Grafana, ELK, etc.)
 * 2. Definir m√©tricas clave y dashboards de observabilidad
 * 3. Establecer umbrales y reglas de alerta
 * 4. Configurar notificaciones para incidentes
 * 5. Generar scripts de instalaci√≥n y configuraci√≥n
 */
export class MonitorAgent extends BaseAgent {
  constructor() {
    super('Monitor Agent');
  }

  /**
   * Ejecuta el agente de monitoreo
   * @param spec Especificaci√≥n del sistema de monitoreo a configurar
   */
  async run(spec: string): Promise<void> {
    console.log('üìä Iniciando Monitor Agent...');
    console.log('üìã Especificaci√≥n recibida:', spec);

    try {
      // Determinar el tipo de operaci√≥n
      if (spec.startsWith('metrics:')) {
        const metricsSpec = spec.substring(8).trim();
        await this.defineMetrics(metricsSpec);
      } else if (spec.startsWith('dashboard:')) {
        const dashboardSpec = spec.substring(10).trim();
        await this.configureDashboard(dashboardSpec);
      } else if (spec.startsWith('alerts:')) {
        const alertsSpec = spec.substring(7).trim();
        await this.configureAlerts(alertsSpec);
      } else if (spec.startsWith('install:')) {
        const installSpec = spec.substring(8).trim();
        await this.generateInstallationScripts(installSpec);
      } else {
        // Operaci√≥n por defecto: configuraci√≥n completa
        await this.configureMonitoring(spec);
      }
      
      console.log('‚úÖ Sistema de monitoreo configurado con √©xito');
    } catch (error) {
      console.error('‚ùå Error al configurar el sistema de monitoreo:', error);
      throw error;
    }
  }
  
  /**
   * Define m√©tricas clave para monitorear
   * @param spec Especificaci√≥n de las m√©tricas
   */
  private async defineMetrics(spec: string): Promise<void> {
    console.log(`üìà Definiendo m√©tricas para: "${spec}"`);
    
    // Crear directorio para m√©tricas si no existe
    const metricsDir = path.join(process.cwd(), 'monitoring', 'metrics');
    if (!fs.existsSync(metricsDir)) {
      fs.mkdirSync(metricsDir, { recursive: true });
    }
    
    // Crear prompt para el LLM
    const metricsPrompt = `
    # Tarea de Monitor Agent
    
    Define m√©tricas clave para monitorear el siguiente sistema:
    
    "${spec}"
    
    Proporciona:
    1. Lista de m√©tricas clave con descripciones
    2. Tipo de cada m√©trica (contador, gauge, histograma, etc.)
    3. Unidades de medida
    4. Frecuencia de recolecci√≥n recomendada
    5. Configuraci√≥n para Prometheus (si aplica)
    
    Estructura tu respuesta en formato JSON.
    `;
    
    try {
      // Consultar al LLM
      const response = await this.queryLLM(metricsPrompt);
      
            // Extraer el JSON de la respuesta
            const jsonMatch = response.match(/```(?:json)\n([\s\S]*?)\n```/) || 
            response.match(/```\n([\s\S]*?)\n```/) ||
            response.match(/{[\s\S]*?}/);

if (!jsonMatch) {
throw new Error('No se pudo extraer la definici√≥n de m√©tricas de la respuesta del LLM');
}

const metrics = JSON.parse(jsonMatch[1] || jsonMatch[0]);

// Generar nombre de archivo basado en la especificaci√≥n
const fileName = `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-metrics.json`;
const filePath = path.join(metricsDir, fileName);

// Guardar las m√©tricas
fs.writeFileSync(filePath, JSON.stringify(metrics, null, 2), 'utf-8');

// Generar configuraci√≥n de Prometheus si est√° disponible
if (metrics.prometheusConfig) {
const prometheusDir = path.join(process.cwd(), 'monitoring', 'prometheus');
if (!fs.existsSync(prometheusDir)) {
fs.mkdirSync(prometheusDir, { recursive: true });
}

const prometheusPath = path.join(prometheusDir, `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}.yml`);
fs.writeFileSync(prometheusPath, metrics.prometheusConfig, 'utf-8');
console.log(`‚úÖ Configuraci√≥n de Prometheus generada: ${prometheusPath}`);
}

// Generar documentaci√≥n de m√©tricas
const docsDir = path.join(process.cwd(), 'monitoring', 'docs');
if (!fs.existsSync(docsDir)) {
fs.mkdirSync(docsDir, { recursive: true });
}

// Crear prompt para documentaci√≥n
const docsPrompt = `
# Tarea de Monitor Agent

Genera documentaci√≥n detallada para las siguientes m√©tricas:

${JSON.stringify(metrics, null, 2)}

La documentaci√≥n debe incluir:
1. Descripci√≥n de cada m√©trica
2. C√≥mo interpretar los valores
3. Ejemplos de uso en consultas y dashboards
4. Recomendaciones para umbrales de alerta

Formato: Markdown
`;

// Consultar al LLM para documentaci√≥n
const docsResponse = await this.queryLLM(docsPrompt);

// Guardar la documentaci√≥n
const docsPath = path.join(docsDir, `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-metrics.md`);
fs.writeFileSync(docsPath, docsResponse, 'utf-8');

console.log(`‚úÖ M√©tricas definidas: ${filePath}`);
console.log(`üìù Documentaci√≥n guardada: ${docsPath}`);
} catch (error) {
console.error('‚ùå Error al definir m√©tricas:', error);
throw error;
}
}

/**
* Configura un dashboard de monitoreo
* @param spec Especificaci√≥n del dashboard
*/
private async configureDashboard(spec: string): Promise<void> {
console.log(`üìä Configurando dashboard para: "${spec}"`);

// Crear directorio para dashboards si no existe
const dashboardsDir = path.join(process.cwd(), 'monitoring', 'dashboards');
if (!fs.existsSync(dashboardsDir)) {
fs.mkdirSync(dashboardsDir, { recursive: true });
}

// Crear prompt para el LLM
const dashboardPrompt = `
# Tarea de Monitor Agent

Dise√±a un dashboard de monitoreo para el siguiente sistema:

"${spec}"

Proporciona:
1. Paneles recomendados con sus m√©tricas
2. Disposici√≥n y organizaci√≥n visual
3. Configuraci√≥n JSON para Grafana
4. Variables y filtros recomendados

El dashboard debe ser completo y proporcionar una visi√≥n clara del estado del sistema.
`;

try {
// Consultar al LLM
const response = await this.queryLLM(dashboardPrompt);

// Extraer la configuraci√≥n JSON de Grafana
const jsonMatch = response.match(/```(?:json)\n([\s\S]*?)\n```/) || 
            response.match(/```\n([\s\S]*?)\n```/) ||
            response.match(/{[\s\S]*?}/);

if (jsonMatch) {
const dashboardConfig = jsonMatch[1] || jsonMatch[0];

// Generar nombre de archivo basado en la especificaci√≥n
const fileName = `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-dashboard.json`;
const filePath = path.join(dashboardsDir, fileName);

// Guardar la configuraci√≥n del dashboard
fs.writeFileSync(filePath, dashboardConfig, 'utf-8');
console.log(`‚úÖ Configuraci√≥n de dashboard guardada: ${filePath}`);
}

// Extraer la descripci√≥n y recomendaciones
const description = response.replace(/```[\s\S]*?```/g, '').trim();

// Guardar la descripci√≥n
const descPath = path.join(dashboardsDir, `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-dashboard.md`);
fs.writeFileSync(descPath, description, 'utf-8');

// Generar una imagen de previsualizaci√≥n del dashboard (simulada)
const previewDir = path.join(process.cwd(), 'monitoring', 'previews');
if (!fs.existsSync(previewDir)) {
fs.mkdirSync(previewDir, { recursive: true });
}

// Crear prompt para generar una representaci√≥n visual
const previewPrompt = `
# Tarea de Monitor Agent

Genera una representaci√≥n visual en ASCII art del siguiente dashboard:

"${spec}"

La representaci√≥n debe mostrar la disposici√≥n de los paneles y gr√°ficos principales.
`;

// Consultar al LLM para la previsualizaci√≥n
const previewResponse = await this.queryLLM(previewPrompt);

// Extraer el ASCII art
const asciiMatch = previewResponse.match(/```(?:ascii|text)\n([\s\S]*?)\n```/) || 
             previewResponse.match(/```\n([\s\S]*?)\n```/);

if (asciiMatch) {
const asciiArt = asciiMatch[1] || asciiMatch[0];

// Guardar la previsualizaci√≥n
const previewPath = path.join(previewDir, `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-preview.txt`);
fs.writeFileSync(previewPath, asciiArt, 'utf-8');
console.log(`üñºÔ∏è Previsualizaci√≥n generada: ${previewPath}`);
}

console.log(`üìù Descripci√≥n del dashboard guardada: ${descPath}`);
} catch (error) {
console.error('‚ùå Error al configurar dashboard:', error);
throw error;
}
}

/**
* Configura reglas de alerta
* @param spec Especificaci√≥n de las alertas
*/
private async configureAlerts(spec: string): Promise<void> {
console.log(`üö® Configurando alertas para: "${spec}"`);

// Crear directorio para alertas si no existe
const alertsDir = path.join(process.cwd(), 'monitoring', 'alerts');
if (!fs.existsSync(alertsDir)) {
fs.mkdirSync(alertsDir, { recursive: true });
}

// Crear prompt para el LLM
const alertsPrompt = `
# Tarea de Monitor Agent

Define reglas de alerta para el siguiente sistema:

"${spec}"

Proporciona:
1. Lista de alertas con descripciones
2. Condiciones de activaci√≥n (expresiones)
3. Niveles de severidad
4. Acciones recomendadas
5. Configuraci√≥n para Alertmanager (si aplica)

Las alertas deben cubrir escenarios cr√≠ticos y proporcionar informaci√≥n accionable.
`;

try {
// Consultar al LLM
const response = await this.queryLLM(alertsPrompt);

// Extraer el JSON de la respuesta
const jsonMatch = response.match(/```(?:json|yaml|yml)\n([\s\S]*?)\n```/) || 
            response.match(/```\n([\s\S]*?)\n```/) ||
            response.match(/{[\s\S]*?}/);

if (jsonMatch) {
const alertsConfig = jsonMatch[1] || jsonMatch[0];

// Determinar el formato (JSON o YAML)
const isYaml = alertsConfig.trim().startsWith('-') || 
           alertsConfig.includes(':') && !alertsConfig.includes('{');

// Generar nombre de archivo basado en la especificaci√≥n
const extension = isYaml ? 'yml' : 'json';
const fileName = `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-alerts.${extension}`;
const filePath = path.join(alertsDir, fileName);

// Guardar la configuraci√≥n de alertas
fs.writeFileSync(filePath, alertsConfig, 'utf-8');
console.log(`‚úÖ Configuraci√≥n de alertas guardada: ${filePath}`);
}

// Extraer la documentaci√≥n
const documentation = response.replace(/```[\s\S]*?```/g, '').trim();

// Guardar la documentaci√≥n
const docPath = path.join(alertsDir, `${spec.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '')}-alerts.md`);
fs.writeFileSync(docPath, documentation, 'utf-8');

// Generar plantillas de notificaci√≥n
await this.generateNotificationTemplates(spec, alertsDir);

console.log(`üìù Documentaci√≥n de alertas guardada: ${docPath}`);
} catch (error) {
console.error('‚ùå Error al configurar alertas:', error);
throw error;
}
}

/**
* Genera plantillas de notificaci√≥n para alertas
* @param spec Especificaci√≥n del sistema
* @param alertsDir Directorio de alertas
*/
private async generateNotificationTemplates(spec: string, alertsDir: string): Promise<void> {
console.log(`üìß Generando plantillas de notificaci√≥n para: "${spec}"`);

// Crear directorio para plantillas si no existe
const templatesDir = path.join(alertsDir, 'templates');
if (!fs.existsSync(templatesDir)) {
fs.mkdirSync(templatesDir, { recursive: true });
}

// Crear prompt para el LLM
const templatesPrompt = `
# Tarea de Monitor Agent

Genera plantillas de notificaci√≥n para alertas del siguiente sistema:

"${spec}"

Proporciona plantillas para:
1. Correo electr√≥nico
2. Slack/Teams
3. SMS
4. Webhook (JSON)

Las plantillas deben ser claras, informativas y accionables.
`;

try {
// Consultar al LLM
const response = await this.queryLLM(templatesPrompt);

// Extraer las diferentes plantillas
const emailMatch = response.match(/```(?:html|email)\n([\s\S]*?)\n```/);
const slackMatch = response.match(/```(?:json|slack)\n([\s\S]*?)\n```/);
const smsMatch = response.match(/```(?:text|sms)\n([\s\S]*?)\n```/);
const webhookMatch = response.match(/```(?:json|webhook)\n([\s\S]*?)\n```/);

// Guardar plantilla de correo
if (emailMatch) {
const emailTemplate = emailMatch[1];
const emailPath = path.join(templatesDir, 'email.html');
fs.writeFileSync(emailPath, emailTemplate, 'utf-8');
console.log(`‚úÖ Plantilla de correo guardada: ${emailPath}`);
}

// Guardar plantilla de Slack/Teams
if (slackMatch) {
const slackTemplate = slackMatch[1];
const slackPath = path.join(templatesDir, 'slack.json');
fs.writeFileSync(slackPath, slackTemplate, 'utf-8');
console.log(`‚úÖ Plantilla de Slack guardada: ${slackPath}`);
}

// Guardar plantilla de SMS
if (smsMatch) {
const smsTemplate = smsMatch[1];
const smsPath = path.join(templatesDir, 'sms.txt');
fs.writeFileSync(smsPath, smsTemplate, 'utf-8');
console.log(`‚úÖ Plantilla de SMS guardada: ${smsPath}`);
}

// Guardar plantilla de Webhook
if (webhookMatch) {
const webhookTemplate = webhookMatch[1];
const webhookPath = path.join(templatesDir, 'webhook.json');
fs.writeFileSync(webhookPath, webhookTemplate, 'utf-8');
console.log(`‚úÖ Plantilla de Webhook guardada: ${webhookPath}`);
}
} catch (error) {
console.error('‚ùå Error al generar plantillas de notificaci√≥n:', error);
// No lanzar error para no interrumpir el flujo principal
console.log('‚ö†Ô∏è Continuando sin plantillas de notificaci√≥n');
}
}

/**
* Genera scripts de instalaci√≥n y configuraci√≥n
* @param spec Especificaci√≥n del sistema de monitoreo
*/
private async generateInstallationScripts(spec: string): Promise<void> {
console.log(`üîß Generando scripts de instalaci√≥n para: "${spec}"`);

// Crear directorio para scripts si no existe
const scriptsDir = path.join(process.cwd(), 'monitoring', 'scripts');
if (!fs.existsSync(scriptsDir)) {
fs.mkdirSync(scriptsDir, { recursive: true });
}

// Determinar el tipo de sistema de monitoreo
let system = 'generic';
if (spec.toLowerCase().includes('prometheus')) {
system = 'prometheus';
} else if (spec.toLowerCase().includes('grafana')) {
system = 'grafana';
} else if (spec.toLowerCase().includes('elk') || spec.toLowerCase().includes('elastic')) {
system = 'elk';
} else if (spec.toLowerCase().includes('datadog')) {
system = 'datadog';
} else if (spec.toLowerCase().includes('newrelic')) {
system = 'newrelic';
}

// Crear prompt para el LLM
const scriptsPrompt = `
# Tarea de Monitor Agent

Genera scripts de instalaci√≥n y configuraci√≥n para el siguiente sistema de monitoreo:

"${spec}" (Tipo: ${system})

Proporciona scripts para:
1. Instalaci√≥n en entorno de desarrollo (Docker)
2. Instalaci√≥n en entorno de producci√≥n
3. Configuraci√≥n inicial
4. Integraci√≥n con la aplicaci√≥n

Los scripts deben ser detallados, incluir comentarios y manejar errores.
Proporciona versiones para Windows y Linux.
`;

try {
// Consultar al LLM
const response = await this.queryLLM(scriptsPrompt);

// Extraer los scripts
const dockerMatch = response.match(/```(?:docker|dockerfile)\n([\s\S]*?)\n```/);
const bashMatch = response.match(/```(?:bash|sh)\n([\s\S]*?)\n```/);
const powershellMatch = response.match(/```(?:powershell|ps1)\n([\s\S]*?)\n```/);
const yamlMatch = response.match(/```(?:yaml|yml)\n([\s\S]*?)\n```/);

// Guardar Dockerfile
if (dockerMatch) {
const dockerfile = dockerMatch[1];
const dockerfilePath = path.join(scriptsDir, `${system}-Dockerfile`);
fs.writeFileSync(dockerfilePath, dockerfile, 'utf-8');
console.log(`‚úÖ Dockerfile guardado: ${dockerfilePath}`);
}

// Guardar script Bash
if (bashMatch) {
const bashScript = bashMatch[1];
const bashPath = path.join(scriptsDir, `install-${system}.sh`);
fs.writeFileSync(bashPath, bashScript, 'utf-8');
console.log(`‚úÖ Script Bash guardado: ${bashPath}`);
}

// Guardar script PowerShell
if (powershellMatch) {
const psScript = powershellMatch[1];
const psPath = path.join(scriptsDir, `install-${system}.ps1`);
fs.writeFileSync(psPath, psScript, 'utf-8');
console.log(`‚úÖ Script PowerShell guardado: ${psPath}`);
}

// Guardar configuraci√≥n YAML
if (yamlMatch) {
const yamlConfig = yamlMatch[1];
const yamlPath = path.join(scriptsDir, `${system}-config.yml`);
fs.writeFileSync(yamlPath, yamlConfig, 'utf-8');
console.log(`‚úÖ Configuraci√≥n YAML guardada: ${yamlPath}`);
}

// Generar docker-compose.yml
const composePrompt = `
# Tarea de Monitor Agent

Genera un archivo docker-compose.yml para el siguiente sistema de monitoreo:

"${spec}" (Tipo: ${system})

El archivo debe incluir todos los servicios necesarios y estar bien configurado.
`;

const composeResponse = await this.queryLLM(composePrompt);
const composeMatch = composeResponse.match(/```(?:yaml|yml|docker-compose)\n([\s\S]*?)\n```/) || 
               composeResponse.match(/```\n([\s\S]*?)\n```/);

if (composeMatch) {
const composeConfig = composeMatch[1];
const composePath = path.join(scriptsDir, 'docker-compose.yml');
fs.writeFileSync(composePath, composeConfig, 'utf-8');
console.log(`‚úÖ Docker Compose guardado: ${composePath}`);
}

// Generar README con instrucciones
const readmePrompt = `
# Tarea de Monitor Agent

Genera un README con instrucciones detalladas para instalar y configurar el siguiente sistema de monitoreo:

"${spec}" (Tipo: ${system})

Incluye:
1. Requisitos previos
2. Pasos de instalaci√≥n
3. Configuraci√≥n inicial
4. Verificaci√≥n del funcionamiento
5. Soluci√≥n de problemas comunes

Formato: Markdown
`;

const readmeResponse = await this.queryLLM(readmePrompt);
const readmePath = path.join(scriptsDir, 'README.md');
fs.writeFileSync(readmePath, readmeResponse, 'utf-8');

console.log(`üìù Instrucciones guardadas: ${readmePath}`);
} catch (error) {
console.error('‚ùå Error al generar scripts de instalaci√≥n:', error);
throw error;
}
}

/**
* Configura un sistema de monitoreo completo
* @param spec Especificaci√≥n del sistema
*/
private async configureMonitoring(spec: string): Promise<void> {
console.log(`üîç Analizando requisitos de monitoreo para: "${spec}"`);

try {
// Crear directorio principal si no existe
const monitoringDir = path.join(process.cwd(), 'monitoring');
if (!fs.existsSync(monitoringDir)) {
fs.mkdirSync(monitoringDir, { recursive: true });
}

// Crear prompt para an√°lisis
const analysisPrompt = `
# Tarea de Monitor Agent

Analiza los requisitos de monitoreo para el siguiente sistema:

"${spec}"

Proporciona:
1. Sistemas de monitoreo recomendados
2. M√©tricas clave a recolectar
3. Dashboards necesarios
4. Alertas cr√≠ticas
5. Estrategia de implementaci√≥n

Estructura tu respuesta en formato JSON.
`;

// Consultar al LLM
const analysisResponse = await this.queryLLM(analysisPrompt);

// Extraer el JSON de la respuesta
const jsonMatch = analysisResponse.match(/```(?:json)\n([\s\S]*?)\n```/) || 
            analysisResponse.match(/```\n([\s\S]*?)\n```/) ||
            analysisResponse.match(/{[\s\S]*?}/);

if (!jsonMatch) {
throw new Error('No se pudo extraer el an√°lisis de la respuesta del LLM');
}

const analysis = JSON.parse(jsonMatch[1] || jsonMatch[0]);

// Guardar el an√°lisis
const analysisPath = path.join(monitoringDir, 'monitoring-analysis.json');
fs.writeFileSync(analysisPath, JSON.stringify(analysis, null, 2), 'utf-8');

console.log('‚úÖ An√°lisis de monitoreo completado');

// Implementar cada componente del sistema de monitoreo
if (analysis.metrics) {
await this.defineMetrics(`${spec} - M√©tricas`);
}

if (analysis.dashboards) {
for (const dashboard of analysis.dashboards) {
await this.configureDashboard(`${dashboard.name}: ${dashboard.description}`);
}
}

if (analysis.alerts) {
await this.configureAlerts(`${spec} - Alertas`);
}

// Generar scripts de instalaci√≥n
await this.generateInstallationScripts(`${spec} - ${analysis.recommendedSystem || 'Sistema completo'}`);

// Generar documentaci√≥n completa
await this.generateMonitoringDocumentation(spec, analysis);

console.log('‚úÖ Sistema de monitoreo configurado con √©xito');
} catch (error) {
console.error('‚ùå Error al configurar sistema de monitoreo:', error);
throw error;
}
}

/**
* Genera documentaci√≥n completa del sistema de monitoreo
* @param spec Especificaci√≥n del sistema
* @param analysis An√°lisis del sistema
*/
private async generateMonitoringDocumentation(spec: string, analysis: any): Promise<void> {
console.log(`üìö Generando documentaci√≥n de monitoreo para: "${spec}"`);

// Crear directorio para documentaci√≥n si no existe
const docsDir = path.join(process.cwd(), 'monitoring', 'docs');
if (!fs.existsSync(docsDir)) {
fs.mkdirSync(docsDir, { recursive: true });
}

// Crear prompt para el LLM
const docsPrompt = `
# Tarea de Monitor Agent

Genera documentaci√≥n completa para el sistema de monitoreo:

"${spec}"

Basado en el siguiente an√°lisis:
${JSON.stringify(analysis, null, 2)}

La documentaci√≥n debe incluir:
1. Visi√≥n general del sistema de monitoreo
2. Arquitectura y componentes
3. Gu√≠a de instalaci√≥n y configuraci√≥n
4. Descripci√≥n de m√©tricas y dashboards
5. Procedimientos de respuesta a alertas
6. Mejores pr√°cticas y recomendaciones

Formato: Markdown
`;

try {
// Consultar al LLM
const response = await this.queryLLM(docsPrompt);

// Guardar la documentaci√≥n principal
const mainDocPath = path.join(docsDir, 'monitoring-guide.md');
fs.writeFileSync(mainDocPath, response, 'utf-8');

// Generar √≠ndice de documentaci√≥n
const indexPrompt = `
# Tarea de Monitor Agent

Genera un √≠ndice para la documentaci√≥n del sistema de monitoreo:

"${spec}"

El √≠ndice debe listar todos los documentos y recursos disponibles.
`;

const indexResponse = await this.queryLLM(indexPrompt);
const indexPath = path.join(docsDir, 'index.md');
fs.writeFileSync(indexPath, indexResponse, 'utf-8');

console.log(`‚úÖ Documentaci√≥n principal guardada: ${mainDocPath}`);
console.log(`‚úÖ √çndice de documentaci√≥n guardado: ${indexPath}`);
} catch (error) {
console.error('‚ùå Error al generar documentaci√≥n:', error);
// No lanzar error para no interrumpir el flujo principal
console.log('‚ö†Ô∏è Continuando sin documentaci√≥n completa');
}
}
}

// Funci√≥n auxiliar para mantener compatibilidad con c√≥digo existente
export async function monitorAgent(spec: string): Promise<string> {
const agent = new MonitorAgent();
await agent.run(spec);
return "Monitor Agent ejecutado con √©xito";
}